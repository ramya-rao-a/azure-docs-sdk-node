### YamlMime:TSPackage
uid: '@azure/amqp-common'
name: '@azure/amqp-common'
summary: ''
type: package
interfaces:
  - '@azure/amqp-common.ConnectionProperties'
  - '@azure/amqp-common.CreateConnectionContextBaseParameters'
  - '@azure/amqp-common.TokenInfo'
  - '@azure/amqp-common.TokenProvider'
  - '@azure/amqp-common.CbsResponse'
  - '@azure/amqp-common.ConnectionConfigOptions'
  - '@azure/amqp-common.DataTransformer'
  - '@azure/amqp-common.SendRequestOptions'
  - '@azure/amqp-common.RetryConfig'
  - '@azure/amqp-common.AsyncLockOptions'
  - '@azure/amqp-common.EventHubConnectionStringModel'
  - '@azure/amqp-common.IotHubConnectionStringModel'
  - '@azure/amqp-common.ServiceBusConnectionStringModel'
  - '@azure/amqp-common.StorageConnectionStringModel'
classes:
  - '@azure/amqp-common.AadTokenProvider'
  - '@azure/amqp-common.SasTokenProvider'
  - '@azure/amqp-common.CbsClient'
  - '@azure/amqp-common.DefaultDataTransformer'
  - '@azure/amqp-common.MessagingError'
  - '@azure/amqp-common.RequestResponseLink'
  - '@azure/amqp-common.Timeout'
enums:
  - '@azure/amqp-common.TokenType'
  - '@azure/amqp-common.ConditionErrorNameMapper'
  - '@azure/amqp-common.ConditionStatusMapper'
  - '@azure/amqp-common.ErrorNameConditionMapper'
  - '@azure/amqp-common.SystemErrorConditionMapper'
  - '@azure/amqp-common.RetryOperationType'
functions:
  - name: isSystemError(any)
    uid: '@azure/amqp-common.isSystemError'
    package: '@azure/amqp-common'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isSystemError(err: any)'
      parameters:
        - id: err
          type: any
          description: ''
      return:
        type: boolean
        description: ''
  - name: translate(AmqpError | Error)
    uid: '@azure/amqp-common.translate'
    package: '@azure/amqp-common'
    summary: >-
      Translates the AQMP error received at the protocol layer or a generic
      Error into a MessagingError.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function translate(err: AmqpError | Error)'
      parameters:
        - id: err
          type: AmqpError | Error
          description: The amqp error that was received.
      return:
        type: <xref uid="@azure/amqp-common.MessagingError" />
        description: MessagingError object.
  - name: retry<T>(RetryConfig<T>)
    uid: '@azure/amqp-common.retry'
    package: '@azure/amqp-common'
    summary: >-
      It will attempt to linearly retry an operation specified number of times
      with a specified

      delay in between each retry. The retries will only happen if the error is
      retryable.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function retry<T>(config: RetryConfig<T>)'
      parameters:
        - id: config
          type: <xref uid="@azure/amqp-common.RetryConfig" />&lt;T&gt;
          description: |
            Parameters to configure retry operation.
      return:
        type: Promise&lt;T&gt;
        description: Promise<T>.
  - name: 'delay<T>(number, T)'
    uid: '@azure/amqp-common.delay'
    package: '@azure/amqp-common'
    summary: A wrapper for setTimeout that resolves a promise after t milliseconds.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delay<T>(t: number, value?: T)'
      parameters:
        - id: t
          type: number
          description: The number of milliseconds to be delayed.
        - id: value
          type: T
          description: The value to be resolved with after a timeout of t milliseconds.
      return:
        type: Promise&lt;T&gt;
        description: '- Resolved promise'
  - name: 'executePromisesSequentially(Array<any>, any)'
    uid: '@azure/amqp-common.executePromisesSequentially'
    package: '@azure/amqp-common'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function executePromisesSequentially(promiseFactories: Array<any>,
        kickstart?: any)
      parameters:
        - id: promiseFactories
          type: Array&lt;any&gt;
          description: ''
        - id: kickstart
          type: any
          description: ''
      return:
        type: Promise&lt;any&gt;
        description: ''
  - name: getNewAsyncLock(AsyncLockOptions)
    uid: '@azure/amqp-common.getNewAsyncLock'
    package: '@azure/amqp-common'
    summary: Gets a new instance of the async lock with desired settings.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getNewAsyncLock(options?: AsyncLockOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/amqp-common.AsyncLockOptions" />
          description: ''
      return:
        type: AsyncLock
        description: AsyncLock
  - name: isIotHubConnectionString(string)
    uid: '@azure/amqp-common.isIotHubConnectionString'
    package: '@azure/amqp-common'
    summary: >-
      Determines whether the given connection string is an iothub connection
      string.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isIotHubConnectionString(connectionString: string)'
      parameters:
        - id: connectionString
          type: string
          description: The connection string.
      return:
        type: boolean
        description: boolean.
  - name: parseConnectionString<T>(string)
    uid: '@azure/amqp-common.parseConnectionString'
    package: '@azure/amqp-common'
    summary: >
      Parses the connection string and returns an object of type T.

      Connection strings have the following syntax:


      ConnectionString ::= Part { ";" Part } [ ";" ] [ WhiteSpace ]

      Part             ::= [ PartLiteral [ "=" PartLiteral ] ]

      PartLiteral      ::= [ WhiteSpace ] Literal [ WhiteSpace ]

      Literal          ::= ? any sequence of characters except ; or = or
      WhiteSpace ?

      WhiteSpace       ::= ? all whitespace characters including \r and \n ?
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function parseConnectionString<T>(connectionString: string)'
      parameters:
        - id: connectionString
          type: string
          description: The connection string to be parsed.
      return:
        type: <xref uid="@azure/amqp-common.ParsedOutput" />&lt;T&gt;
        description: ParsedOutput<T>.
  - name: 'randomNumberFromInterval(number, number)'
    uid: '@azure/amqp-common.randomNumberFromInterval'
    package: '@azure/amqp-common'
    summary: Generates a random number between the given interval
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function randomNumberFromInterval(min: number, max: number)'
      parameters:
        - id: min
          type: number
          description: Min number of the range (inclusive).
        - id: max
          type: number
          description: |
            Max number of the range (inclusive).
      return:
        type: number
        description: ''
typeAliases:
  - '@azure/amqp-common.Func'
  - '@azure/amqp-common.ParsedOutput'
