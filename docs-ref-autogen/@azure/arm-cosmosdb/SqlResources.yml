### YamlMime:TSType
name: SqlResources
uid: '@azure/arm-cosmosdb.SqlResources'
package: '@azure/arm-cosmosdb'
summary: Class representing a SqlResources.
fullName: SqlResources
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: SqlResources(CosmosDBManagementClientContext)
    uid: '@azure/arm-cosmosdb.SqlResources.constructor'
    package: '@azure/arm-cosmosdb'
    summary: Create a SqlResources.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new SqlResources(client: CosmosDBManagementClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/arm-cosmosdb.CosmosDBManagementClientContext" />
          description: |
            Reference to the service client.
methods:
  - name: >-
      beginCreateUpdateSqlContainer(string, string, string, string,
      SqlContainerCreateUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlContainer'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlContainer(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        createUpdateSqlContainerParameters: SqlContainerCreateUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: createUpdateSqlContainerParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.SqlContainerCreateUpdateParameters"
            />
          description: |-
            The parameters to provide for the current SQL
            container.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginCreateUpdateSqlDatabase(string, string, string,
      SqlDatabaseCreateUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlDatabase'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlDatabase(resourceGroupName: string,
        accountName: string, databaseName: string,
        createUpdateSqlDatabaseParameters: SqlDatabaseCreateUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: createUpdateSqlDatabaseParameters
          type: <xref uid="@azure/arm-cosmosdb.SqlDatabaseCreateUpdateParameters" />
          description: The parameters to provide for the current SQL database.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginCreateUpdateSqlStoredProcedure(string, string, string, string,
      string, SqlStoredProcedureCreateUpdateParameters,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlStoredProcedure'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL storedProcedure
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlStoredProcedure(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        storedProcedureName: string, createUpdateSqlStoredProcedureParameters:
        SqlStoredProcedureCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type: string
          description: Cosmos DB storedProcedure name.
        - id: createUpdateSqlStoredProcedureParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlStoredProcedureCreateUpdateParameters"
            />
          description: |-
            The parameters to provide for the current SQL
            storedProcedure.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginCreateUpdateSqlTrigger(string, string, string, string, string,
      SqlTriggerCreateUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlTrigger'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL trigger
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlTrigger(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        triggerName: string, createUpdateSqlTriggerParameters:
        SqlTriggerCreateUpdateParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: triggerName
          type: string
          description: Cosmos DB trigger name.
        - id: createUpdateSqlTriggerParameters
          type: <xref uid="@azure/arm-cosmosdb.SqlTriggerCreateUpdateParameters" />
          description: The parameters to provide for the current SQL trigger.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginCreateUpdateSqlUserDefinedFunction(string, string, string, string,
      string, SqlUserDefinedFunctionCreateUpdateParameters,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlUserDefinedFunction'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL userDefinedFunction
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlUserDefinedFunction(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, userDefinedFunctionName: string,
        createUpdateSqlUserDefinedFunctionParameters:
        SqlUserDefinedFunctionCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type: string
          description: Cosmos DB userDefinedFunction name.
        - id: createUpdateSqlUserDefinedFunctionParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlUserDefinedFunctionCreateUpdateParameters"
            />
          description: |-
            The parameters to provide for the current
            SQL userDefinedFunction.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginDeleteSqlContainer(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlContainer'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlContainer(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: 'beginDeleteSqlDatabase(string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlDatabase'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL database.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginDeleteSqlStoredProcedure(string, string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlStoredProcedure'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL storedProcedure.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlStoredProcedure(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        storedProcedureName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type: string
          description: Cosmos DB storedProcedure name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginDeleteSqlTrigger(string, string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlTrigger'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL trigger.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlTrigger(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, triggerName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: triggerName
          type: string
          description: Cosmos DB trigger name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginDeleteSqlUserDefinedFunction(string, string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlUserDefinedFunction'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlUserDefinedFunction(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        userDefinedFunctionName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type: string
          description: Cosmos DB userDefinedFunction name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginMigrateSqlContainerToAutoscale(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.beginMigrateSqlContainerToAutoscale'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL container from manual throughput to
      autoscale
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginMigrateSqlContainerToAutoscale(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginMigrateSqlContainerToManualThroughput(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-cosmosdb.SqlResources.beginMigrateSqlContainerToManualThroughput
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL container from autoscale to manual
      throughput
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginMigrateSqlContainerToManualThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginMigrateSqlDatabaseToAutoscale(string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.beginMigrateSqlDatabaseToAutoscale'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL database from manual throughput to
      autoscale
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginMigrateSqlDatabaseToAutoscale(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginMigrateSqlDatabaseToManualThroughput(string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.beginMigrateSqlDatabaseToManualThroughput'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL database from autoscale to manual
      throughput
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginMigrateSqlDatabaseToManualThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginUpdateSqlContainerThroughput(string, string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.beginUpdateSqlContainerThroughput'
    package: '@azure/arm-cosmosdb'
    summary: Update RUs per second of an Azure Cosmos DB SQL container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateSqlContainerThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        updateThroughputParameters: ThroughputSettingsUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The parameters to provide for the RUs per second of the
            current SQL container.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginUpdateSqlDatabaseThroughput(string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.beginUpdateSqlDatabaseThroughput'
    package: '@azure/arm-cosmosdb'
    summary: Update RUs per second of an Azure Cosmos DB SQL database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateSqlDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, updateThroughputParameters:
        ThroughputSettingsUpdateParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The parameters to provide for the RUs per second of the
            current SQL database.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      createUpdateSqlContainer(string, string, string, string,
      SqlContainerCreateUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.createUpdateSqlContainer'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createUpdateSqlContainer(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        createUpdateSqlContainerParameters: SqlContainerCreateUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: createUpdateSqlContainerParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.SqlContainerCreateUpdateParameters"
            />
          description: |-
            The parameters to provide for the current SQL
            container.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesCreateUpdateSqlContainerResponse" />&gt;
        description: Promise<Models.SqlResourcesCreateUpdateSqlContainerResponse>
  - name: >-
      createUpdateSqlDatabase(string, string, string,
      SqlDatabaseCreateUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.createUpdateSqlDatabase'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createUpdateSqlDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, createUpdateSqlDatabaseParameters:
        SqlDatabaseCreateUpdateParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: createUpdateSqlDatabaseParameters
          type: <xref uid="@azure/arm-cosmosdb.SqlDatabaseCreateUpdateParameters" />
          description: The parameters to provide for the current SQL database.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesCreateUpdateSqlDatabaseResponse" />&gt;
        description: Promise<Models.SqlResourcesCreateUpdateSqlDatabaseResponse>
  - name: >-
      createUpdateSqlStoredProcedure(string, string, string, string, string,
      SqlStoredProcedureCreateUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.createUpdateSqlStoredProcedure'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL storedProcedure
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createUpdateSqlStoredProcedure(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        storedProcedureName: string, createUpdateSqlStoredProcedureParameters:
        SqlStoredProcedureCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type: string
          description: Cosmos DB storedProcedure name.
        - id: createUpdateSqlStoredProcedureParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlStoredProcedureCreateUpdateParameters"
            />
          description: |-
            The parameters to provide for the current SQL
            storedProcedure.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesCreateUpdateSqlStoredProcedureResponse" />&gt;
        description: Promise<Models.SqlResourcesCreateUpdateSqlStoredProcedureResponse>
  - name: >-
      createUpdateSqlTrigger(string, string, string, string, string,
      SqlTriggerCreateUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.createUpdateSqlTrigger'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL trigger
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createUpdateSqlTrigger(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, triggerName:
        string, createUpdateSqlTriggerParameters:
        SqlTriggerCreateUpdateParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: triggerName
          type: string
          description: Cosmos DB trigger name.
        - id: createUpdateSqlTriggerParameters
          type: <xref uid="@azure/arm-cosmosdb.SqlTriggerCreateUpdateParameters" />
          description: The parameters to provide for the current SQL trigger.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesCreateUpdateSqlTriggerResponse" />&gt;
        description: Promise<Models.SqlResourcesCreateUpdateSqlTriggerResponse>
  - name: >-
      createUpdateSqlUserDefinedFunction(string, string, string, string, string,
      SqlUserDefinedFunctionCreateUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.createUpdateSqlUserDefinedFunction'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL userDefinedFunction
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createUpdateSqlUserDefinedFunction(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        userDefinedFunctionName: string,
        createUpdateSqlUserDefinedFunctionParameters:
        SqlUserDefinedFunctionCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type: string
          description: Cosmos DB userDefinedFunction name.
        - id: createUpdateSqlUserDefinedFunctionParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlUserDefinedFunctionCreateUpdateParameters"
            />
          description: |-
            The parameters to provide for the current
            SQL userDefinedFunction.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse"
          />&gt;
        description: Promise<Models.SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse>
  - name: >-
      deleteSqlContainer(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.deleteSqlContainer'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteSqlContainer(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: 'deleteSqlDatabase(string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.SqlResources.deleteSqlDatabase'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL database.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteSqlDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: >-
      deleteSqlStoredProcedure(string, string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.deleteSqlStoredProcedure'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL storedProcedure.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteSqlStoredProcedure(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        storedProcedureName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type: string
          description: Cosmos DB storedProcedure name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: >-
      deleteSqlTrigger(string, string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.deleteSqlTrigger'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL trigger.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteSqlTrigger(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, triggerName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: triggerName
          type: string
          description: Cosmos DB trigger name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: >-
      deleteSqlUserDefinedFunction(string, string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.deleteSqlUserDefinedFunction'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteSqlUserDefinedFunction(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        userDefinedFunctionName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type: string
          description: Cosmos DB userDefinedFunction name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: 'getSqlContainer(string, string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlContainer'
    package: '@azure/arm-cosmosdb'
    summary: Gets the SQL container under an existing Azure Cosmos DB database account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlContainer(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.SqlResourcesGetSqlContainerResponse"
          />&gt;
        description: Promise<Models.SqlResourcesGetSqlContainerResponse>
  - name: >-
      getSqlContainer(string, string, string, string, RequestOptionsBase,
      ServiceCallback<SqlContainerGetResults>)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlContainer_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlContainer(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, options:
        RequestOptionsBase, callback: ServiceCallback<SqlContainerGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlContainerGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getSqlContainer(string, string, string, string,
      ServiceCallback<SqlContainerGetResults>)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlContainer_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlContainer(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, callback:
        ServiceCallback<SqlContainerGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlContainerGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getSqlContainerThroughput(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlContainerThroughput'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the RUs per second of the SQL container under an existing Azure
      Cosmos DB database account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlContainerThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesGetSqlContainerThroughputResponse" />&gt;
        description: Promise<Models.SqlResourcesGetSqlContainerThroughputResponse>
  - name: >-
      getSqlContainerThroughput(string, string, string, string,
      RequestOptionsBase, ServiceCallback<ThroughputSettingsGetResults>)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlContainerThroughput_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlContainerThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getSqlContainerThroughput(string, string, string, string,
      ServiceCallback<ThroughputSettingsGetResults>)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlContainerThroughput_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlContainerThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        callback: ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
          description: |
            The callback
  - name: 'getSqlDatabase(string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlDatabase'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the SQL database under an existing Azure Cosmos DB database account
      with the provided name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlDatabase(resourceGroupName: string, accountName: string,
        databaseName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.SqlResourcesGetSqlDatabaseResponse"
          />&gt;
        description: Promise<Models.SqlResourcesGetSqlDatabaseResponse>
  - name: >-
      getSqlDatabase(string, string, string, RequestOptionsBase,
      ServiceCallback<SqlDatabaseGetResults>)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlDatabase_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlDatabase(resourceGroupName: string, accountName: string,
        databaseName: string, options: RequestOptionsBase, callback:
        ServiceCallback<SqlDatabaseGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlDatabaseGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getSqlDatabase(string, string, string,
      ServiceCallback<SqlDatabaseGetResults>)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlDatabase_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlDatabase(resourceGroupName: string, accountName: string,
        databaseName: string, callback: ServiceCallback<SqlDatabaseGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlDatabaseGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getSqlDatabaseThroughput(string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlDatabaseThroughput'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the RUs per second of the SQL database under an existing Azure Cosmos
      DB database account

      with the provided name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesGetSqlDatabaseThroughputResponse" />&gt;
        description: Promise<Models.SqlResourcesGetSqlDatabaseThroughputResponse>
  - name: >-
      getSqlDatabaseThroughput(string, string, string, RequestOptionsBase,
      ServiceCallback<ThroughputSettingsGetResults>)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlDatabaseThroughput_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, options: RequestOptionsBase,
        callback: ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getSqlDatabaseThroughput(string, string, string,
      ServiceCallback<ThroughputSettingsGetResults>)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlDatabaseThroughput_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, callback:
        ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getSqlStoredProcedure(string, string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlStoredProcedure'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the SQL storedProcedure under an existing Azure Cosmos DB database
      account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlStoredProcedure(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string,
        storedProcedureName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type: string
          description: Cosmos DB storedProcedure name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesGetSqlStoredProcedureResponse" />&gt;
        description: Promise<Models.SqlResourcesGetSqlStoredProcedureResponse>
  - name: >-
      getSqlStoredProcedure(string, string, string, string, string,
      RequestOptionsBase, ServiceCallback<SqlStoredProcedureGetResults>)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlStoredProcedure_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlStoredProcedure(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string,
        storedProcedureName: string, options: RequestOptionsBase, callback:
        ServiceCallback<SqlStoredProcedureGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type: string
          description: Cosmos DB storedProcedure name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlStoredProcedureGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getSqlStoredProcedure(string, string, string, string, string,
      ServiceCallback<SqlStoredProcedureGetResults>)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlStoredProcedure_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlStoredProcedure(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string,
        storedProcedureName: string, callback:
        ServiceCallback<SqlStoredProcedureGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type: string
          description: Cosmos DB storedProcedure name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlStoredProcedureGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getSqlTrigger(string, string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlTrigger'
    package: '@azure/arm-cosmosdb'
    summary: Gets the SQL trigger under an existing Azure Cosmos DB database account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlTrigger(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, triggerName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: triggerName
          type: string
          description: Cosmos DB trigger name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.SqlResourcesGetSqlTriggerResponse" />&gt;
        description: Promise<Models.SqlResourcesGetSqlTriggerResponse>
  - name: >-
      getSqlTrigger(string, string, string, string, string, RequestOptionsBase,
      ServiceCallback<SqlTriggerGetResults>)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlTrigger_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlTrigger(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, triggerName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<SqlTriggerGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: triggerName
          type: string
          description: Cosmos DB trigger name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlTriggerGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getSqlTrigger(string, string, string, string, string,
      ServiceCallback<SqlTriggerGetResults>)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlTrigger_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlTrigger(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, triggerName: string,
        callback: ServiceCallback<SqlTriggerGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: triggerName
          type: string
          description: Cosmos DB trigger name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlTriggerGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getSqlUserDefinedFunction(string, string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlUserDefinedFunction'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the SQL userDefinedFunction under an existing Azure Cosmos DB
      database account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlUserDefinedFunction(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        userDefinedFunctionName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type: string
          description: Cosmos DB userDefinedFunction name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesGetSqlUserDefinedFunctionResponse" />&gt;
        description: Promise<Models.SqlResourcesGetSqlUserDefinedFunctionResponse>
  - name: >-
      getSqlUserDefinedFunction(string, string, string, string, string,
      RequestOptionsBase, ServiceCallback<SqlUserDefinedFunctionGetResults>)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlUserDefinedFunction_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlUserDefinedFunction(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        userDefinedFunctionName: string, options: RequestOptionsBase, callback:
        ServiceCallback<SqlUserDefinedFunctionGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type: string
          description: Cosmos DB userDefinedFunction name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlUserDefinedFunctionGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getSqlUserDefinedFunction(string, string, string, string, string,
      ServiceCallback<SqlUserDefinedFunctionGetResults>)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlUserDefinedFunction_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlUserDefinedFunction(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        userDefinedFunctionName: string, callback:
        ServiceCallback<SqlUserDefinedFunctionGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type: string
          description: Cosmos DB userDefinedFunction name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlUserDefinedFunctionGetResults" />&gt;
          description: |
            The callback
  - name: 'listSqlContainers(string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlContainers'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Lists the SQL container under an existing Azure Cosmos DB database
      account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlContainers(resourceGroupName: string, accountName:
        string, databaseName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.SqlResourcesListSqlContainersResponse"
          />&gt;
        description: Promise<Models.SqlResourcesListSqlContainersResponse>
  - name: >-
      listSqlContainers(string, string, string, RequestOptionsBase,
      ServiceCallback<SqlContainerListResult>)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlContainers_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlContainers(resourceGroupName: string, accountName:
        string, databaseName: string, options: RequestOptionsBase, callback:
        ServiceCallback<SqlContainerListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlContainerListResult" />&gt;
          description: |
            The callback
  - name: >-
      listSqlContainers(string, string, string,
      ServiceCallback<SqlContainerListResult>)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlContainers_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlContainers(resourceGroupName: string, accountName:
        string, databaseName: string, callback:
        ServiceCallback<SqlContainerListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlContainerListResult" />&gt;
          description: |
            The callback
  - name: 'listSqlDatabases(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlDatabases'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Lists the SQL databases under an existing Azure Cosmos DB database
      account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlDatabases(resourceGroupName: string, accountName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.SqlResourcesListSqlDatabasesResponse"
          />&gt;
        description: Promise<Models.SqlResourcesListSqlDatabasesResponse>
  - name: >-
      listSqlDatabases(string, string, RequestOptionsBase,
      ServiceCallback<SqlDatabaseListResult>)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlDatabases_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlDatabases(resourceGroupName: string, accountName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<SqlDatabaseListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlDatabaseListResult" />&gt;
          description: |
            The callback
  - name: 'listSqlDatabases(string, string, ServiceCallback<SqlDatabaseListResult>)'
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlDatabases_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlDatabases(resourceGroupName: string, accountName:
        string, callback: ServiceCallback<SqlDatabaseListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlDatabaseListResult" />&gt;
          description: |
            The callback
  - name: >-
      listSqlStoredProcedures(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlStoredProcedures'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Lists the SQL storedProcedure under an existing Azure Cosmos DB database
      account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlStoredProcedures(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesListSqlStoredProceduresResponse" />&gt;
        description: Promise<Models.SqlResourcesListSqlStoredProceduresResponse>
  - name: >-
      listSqlStoredProcedures(string, string, string, string,
      RequestOptionsBase, ServiceCallback<SqlStoredProcedureListResult>)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlStoredProcedures_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlStoredProcedures(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<SqlStoredProcedureListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlStoredProcedureListResult" />&gt;
          description: |
            The callback
  - name: >-
      listSqlStoredProcedures(string, string, string, string,
      ServiceCallback<SqlStoredProcedureListResult>)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlStoredProcedures_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlStoredProcedures(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, callback:
        ServiceCallback<SqlStoredProcedureListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlStoredProcedureListResult" />&gt;
          description: |
            The callback
  - name: 'listSqlTriggers(string, string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlTriggers'
    package: '@azure/arm-cosmosdb'
    summary: Lists the SQL trigger under an existing Azure Cosmos DB database account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlTriggers(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.SqlResourcesListSqlTriggersResponse"
          />&gt;
        description: Promise<Models.SqlResourcesListSqlTriggersResponse>
  - name: >-
      listSqlTriggers(string, string, string, string, RequestOptionsBase,
      ServiceCallback<SqlTriggerListResult>)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlTriggers_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlTriggers(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, options:
        RequestOptionsBase, callback: ServiceCallback<SqlTriggerListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlTriggerListResult" />&gt;
          description: |
            The callback
  - name: >-
      listSqlTriggers(string, string, string, string,
      ServiceCallback<SqlTriggerListResult>)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlTriggers_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlTriggers(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, callback:
        ServiceCallback<SqlTriggerListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlTriggerListResult" />&gt;
          description: |
            The callback
  - name: >-
      listSqlUserDefinedFunctions(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlUserDefinedFunctions'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Lists the SQL userDefinedFunction under an existing Azure Cosmos DB
      database account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlUserDefinedFunctions(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesListSqlUserDefinedFunctionsResponse" />&gt;
        description: Promise<Models.SqlResourcesListSqlUserDefinedFunctionsResponse>
  - name: >-
      listSqlUserDefinedFunctions(string, string, string, string,
      RequestOptionsBase, ServiceCallback<SqlUserDefinedFunctionListResult>)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlUserDefinedFunctions_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlUserDefinedFunctions(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<SqlUserDefinedFunctionListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlUserDefinedFunctionListResult" />&gt;
          description: |
            The callback
  - name: >-
      listSqlUserDefinedFunctions(string, string, string, string,
      ServiceCallback<SqlUserDefinedFunctionListResult>)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlUserDefinedFunctions_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlUserDefinedFunctions(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        callback: ServiceCallback<SqlUserDefinedFunctionListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.SqlUserDefinedFunctionListResult" />&gt;
          description: |
            The callback
  - name: >-
      migrateSqlContainerToAutoscale(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.migrateSqlContainerToAutoscale'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL container from manual throughput to
      autoscale
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function migrateSqlContainerToAutoscale(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesMigrateSqlContainerToAutoscaleResponse" />&gt;
        description: Promise<Models.SqlResourcesMigrateSqlContainerToAutoscaleResponse>
  - name: >-
      migrateSqlContainerToManualThroughput(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.migrateSqlContainerToManualThroughput'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL container from autoscale to manual
      throughput
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function migrateSqlContainerToManualThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesMigrateSqlContainerToManualThroughputResponse"
          />&gt;
        description: >-
          Promise<Models.SqlResourcesMigrateSqlContainerToManualThroughputResponse>
  - name: >-
      migrateSqlDatabaseToAutoscale(string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.migrateSqlDatabaseToAutoscale'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL database from manual throughput to
      autoscale
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function migrateSqlDatabaseToAutoscale(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesMigrateSqlDatabaseToAutoscaleResponse" />&gt;
        description: Promise<Models.SqlResourcesMigrateSqlDatabaseToAutoscaleResponse>
  - name: >-
      migrateSqlDatabaseToManualThroughput(string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.migrateSqlDatabaseToManualThroughput'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL database from autoscale to manual
      throughput
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function migrateSqlDatabaseToManualThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesMigrateSqlDatabaseToManualThroughputResponse"
          />&gt;
        description: >-
          Promise<Models.SqlResourcesMigrateSqlDatabaseToManualThroughputResponse>
  - name: >-
      updateSqlContainerThroughput(string, string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.updateSqlContainerThroughput'
    package: '@azure/arm-cosmosdb'
    summary: Update RUs per second of an Azure Cosmos DB SQL container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateSqlContainerThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        updateThroughputParameters: ThroughputSettingsUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The parameters to provide for the RUs per second of the
            current SQL container.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesUpdateSqlContainerThroughputResponse" />&gt;
        description: Promise<Models.SqlResourcesUpdateSqlContainerThroughputResponse>
  - name: >-
      updateSqlDatabaseThroughput(string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.SqlResources.updateSqlDatabaseThroughput'
    package: '@azure/arm-cosmosdb'
    summary: Update RUs per second of an Azure Cosmos DB SQL database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateSqlDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, updateThroughputParameters:
        ThroughputSettingsUpdateParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The parameters to provide for the RUs per second of the
            current SQL database.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.SqlResourcesUpdateSqlDatabaseThroughputResponse" />&gt;
        description: Promise<Models.SqlResourcesUpdateSqlDatabaseThroughputResponse>
