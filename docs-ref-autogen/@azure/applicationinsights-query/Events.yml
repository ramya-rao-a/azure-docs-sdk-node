### YamlMime:TSType
name: Events
uid: '@azure/applicationinsights-query.Events'
package: '@azure/applicationinsights-query'
summary: Class representing a Events.
fullName: Events
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: Events(ApplicationInsightsDataClientContext)
    uid: '@azure/applicationinsights-query.Events.constructor'
    package: '@azure/applicationinsights-query'
    summary: Create a Events.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new Events(client: ApplicationInsightsDataClientContext)'
      parameters:
        - id: client
          type: >-
            <xref
            uid="@azure/applicationinsights-query.ApplicationInsightsDataClientContext"
            />
          description: |
            Reference to the service client.
methods:
  - name: >-
      get(string, Models.EventType, string, EventsGetOptionalParams,
      ServiceCallback<EventsResults>)
    uid: '@azure/applicationinsights-query.Events.get_2'
    package: '@azure/applicationinsights-query'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(appId: string, eventType: Models.EventType, eventId:
        string, options: EventsGetOptionalParams, callback:
        ServiceCallback<EventsResults>)
      parameters:
        - id: appId
          type: string
          description: >-
            ID of the application. This is Application ID from the API Access
            settings blade in

            the Azure portal.
        - id: eventType
          type: <xref uid="Models.EventType" />
          description: >-
            The type of events to query; either a standard event type (`traces`,

            `customEvents`, `pageViews`, `requests`, `dependencies`,
            `exceptions`, `availabilityResults`) or

            `$all` to query across all event types. Possible values include:
            '$all', 'traces',

            'customEvents', 'pageViews', 'browserTimings', 'requests',
            'dependencies', 'exceptions',

            'availabilityResults', 'performanceCounters', 'customMetrics'
        - id: eventId
          type: string
          description: ID of event.
        - id: options
          type: >-
            <xref uid="@azure/applicationinsights-query.EventsGetOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/applicationinsights-query.EventsResults" />&gt;
          description: |
            The callback
  - name: 'get(string, Models.EventType, string, Models.EventsGetOptionalParams)'
    uid: '@azure/applicationinsights-query.Events.get'
    package: '@azure/applicationinsights-query'
    summary: Gets the data for a single event
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(appId: string, eventType: Models.EventType, eventId:
        string, options?: Models.EventsGetOptionalParams)
      parameters:
        - id: appId
          type: string
          description: >-
            ID of the application. This is Application ID from the API Access
            settings blade in

            the Azure portal.
        - id: eventType
          type: <xref uid="Models.EventType" />
          description: >-
            The type of events to query; either a standard event type (`traces`,

            `customEvents`, `pageViews`, `requests`, `dependencies`,
            `exceptions`, `availabilityResults`) or

            `$all` to query across all event types. Possible values include:
            '$all', 'traces',

            'customEvents', 'pageViews', 'browserTimings', 'requests',
            'dependencies', 'exceptions',

            'availabilityResults', 'performanceCounters', 'customMetrics'
        - id: eventId
          type: string
          description: ID of event.
        - id: options
          type: <xref uid="Models.EventsGetOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.EventsGetResponse" />&gt;
        description: Promise<Models.EventsGetResponse>
  - name: 'get(string, Models.EventType, string, ServiceCallback<EventsResults>)'
    uid: '@azure/applicationinsights-query.Events.get_1'
    package: '@azure/applicationinsights-query'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(appId: string, eventType: Models.EventType, eventId:
        string, callback: ServiceCallback<EventsResults>)
      parameters:
        - id: appId
          type: string
          description: >-
            ID of the application. This is Application ID from the API Access
            settings blade in

            the Azure portal.
        - id: eventType
          type: <xref uid="Models.EventType" />
          description: >-
            The type of events to query; either a standard event type (`traces`,

            `customEvents`, `pageViews`, `requests`, `dependencies`,
            `exceptions`, `availabilityResults`) or

            `$all` to query across all event types. Possible values include:
            '$all', 'traces',

            'customEvents', 'pageViews', 'browserTimings', 'requests',
            'dependencies', 'exceptions',

            'availabilityResults', 'performanceCounters', 'customMetrics'
        - id: eventId
          type: string
          description: ID of event.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/applicationinsights-query.EventsResults" />&gt;
          description: |
            The callback
  - name: >-
      getByType(string, Models.EventType, EventsGetByTypeOptionalParams,
      ServiceCallback<EventsResults>)
    uid: '@azure/applicationinsights-query.Events.getByType_2'
    package: '@azure/applicationinsights-query'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getByType(appId: string, eventType: Models.EventType, options:
        EventsGetByTypeOptionalParams, callback: ServiceCallback<EventsResults>)
      parameters:
        - id: appId
          type: string
          description: >-
            ID of the application. This is Application ID from the API Access
            settings blade in

            the Azure portal.
        - id: eventType
          type: <xref uid="Models.EventType" />
          description: >-
            The type of events to query; either a standard event type (`traces`,

            `customEvents`, `pageViews`, `requests`, `dependencies`,
            `exceptions`, `availabilityResults`) or

            `$all` to query across all event types. Possible values include:
            '$all', 'traces',

            'customEvents', 'pageViews', 'browserTimings', 'requests',
            'dependencies', 'exceptions',

            'availabilityResults', 'performanceCounters', 'customMetrics'
        - id: options
          type: >-
            <xref
            uid="@azure/applicationinsights-query.EventsGetByTypeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/applicationinsights-query.EventsResults" />&gt;
          description: |
            The callback
  - name: 'getByType(string, Models.EventType, Models.EventsGetByTypeOptionalParams)'
    uid: '@azure/applicationinsights-query.Events.getByType'
    package: '@azure/applicationinsights-query'
    summary: Executes an OData query for events
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getByType(appId: string, eventType: Models.EventType, options?:
        Models.EventsGetByTypeOptionalParams)
      parameters:
        - id: appId
          type: string
          description: >-
            ID of the application. This is Application ID from the API Access
            settings blade in

            the Azure portal.
        - id: eventType
          type: <xref uid="Models.EventType" />
          description: >-
            The type of events to query; either a standard event type (`traces`,

            `customEvents`, `pageViews`, `requests`, `dependencies`,
            `exceptions`, `availabilityResults`) or

            `$all` to query across all event types. Possible values include:
            '$all', 'traces',

            'customEvents', 'pageViews', 'browserTimings', 'requests',
            'dependencies', 'exceptions',

            'availabilityResults', 'performanceCounters', 'customMetrics'
        - id: options
          type: <xref uid="Models.EventsGetByTypeOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.EventsGetByTypeResponse" />&gt;
        description: Promise<Models.EventsGetByTypeResponse>
  - name: 'getByType(string, Models.EventType, ServiceCallback<EventsResults>)'
    uid: '@azure/applicationinsights-query.Events.getByType_1'
    package: '@azure/applicationinsights-query'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getByType(appId: string, eventType: Models.EventType, callback:
        ServiceCallback<EventsResults>)
      parameters:
        - id: appId
          type: string
          description: >-
            ID of the application. This is Application ID from the API Access
            settings blade in

            the Azure portal.
        - id: eventType
          type: <xref uid="Models.EventType" />
          description: >-
            The type of events to query; either a standard event type (`traces`,

            `customEvents`, `pageViews`, `requests`, `dependencies`,
            `exceptions`, `availabilityResults`) or

            `$all` to query across all event types. Possible values include:
            '$all', 'traces',

            'customEvents', 'pageViews', 'browserTimings', 'requests',
            'dependencies', 'exceptions',

            'availabilityResults', 'performanceCounters', 'customMetrics'
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/applicationinsights-query.EventsResults" />&gt;
          description: |
            The callback
