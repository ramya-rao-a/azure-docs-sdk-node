### YamlMime:TSType
name: RollingUpgradePolicy
uid: '@azure/arm-compute.RollingUpgradePolicy'
package: '@azure/arm-compute'
summary: The configuration parameters used while performing a rolling upgrade.
fullName: RollingUpgradePolicy
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: enableCrossZoneUpgrade
    uid: '@azure/arm-compute.RollingUpgradePolicy.enableCrossZoneUpgrade'
    package: '@azure/arm-compute'
    summary: >-
      Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take
      into consideration

      the Update Domain and maxBatchInstancePercent to determine the batch size.
    fullName: enableCrossZoneUpgrade
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enableCrossZoneUpgrade?: undefined | false | true'
      return:
        type: undefined | false | true
        description: ''
  - name: maxBatchInstancePercent
    uid: '@azure/arm-compute.RollingUpgradePolicy.maxBatchInstancePercent'
    package: '@azure/arm-compute'
    summary: >-
      The maximum percent of total virtual machine instances that will be
      upgraded simultaneously by

      the rolling upgrade in one batch. As this is a maximum, unhealthy
      instances in previous or

      future batches can cause the percentage of instances in a batch to
      decrease to ensure higher

      reliability. The default value for this parameter is 20%.
    fullName: maxBatchInstancePercent
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'maxBatchInstancePercent?: undefined | number'
      return:
        type: undefined | number
        description: ''
  - name: maxUnhealthyInstancePercent
    uid: '@azure/arm-compute.RollingUpgradePolicy.maxUnhealthyInstancePercent'
    package: '@azure/arm-compute'
    summary: >-
      The maximum percentage of the total virtual machine instances in the scale
      set that can be

      simultaneously unhealthy, either as a result of being upgraded, or by
      being found in an

      unhealthy state by the virtual machine health checks before the rolling
      upgrade aborts. This

      constraint will be checked prior to starting any batch. The default value
      for this parameter

      is 20%.
    fullName: maxUnhealthyInstancePercent
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'maxUnhealthyInstancePercent?: undefined | number'
      return:
        type: undefined | number
        description: ''
  - name: maxUnhealthyUpgradedInstancePercent
    uid: >-
      @azure/arm-compute.RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent
    package: '@azure/arm-compute'
    summary: >-
      The maximum percentage of upgraded virtual machine instances that can be
      found to be in an

      unhealthy state. This check will happen after each batch is upgraded. If
      this percentage is

      ever exceeded, the rolling update aborts. The default value for this
      parameter is 20%.
    fullName: maxUnhealthyUpgradedInstancePercent
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'maxUnhealthyUpgradedInstancePercent?: undefined | number'
      return:
        type: undefined | number
        description: ''
  - name: pauseTimeBetweenBatches
    uid: '@azure/arm-compute.RollingUpgradePolicy.pauseTimeBetweenBatches'
    package: '@azure/arm-compute'
    summary: >-
      The wait time between completing the update for all virtual machines in
      one batch and starting

      the next batch. The time duration should be specified in ISO 8601 format.
      The default value is

      0 seconds (PT0S).
    fullName: pauseTimeBetweenBatches
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'pauseTimeBetweenBatches?: undefined | string'
      return:
        type: undefined | string
        description: ''
  - name: prioritizeUnhealthyInstances
    uid: '@azure/arm-compute.RollingUpgradePolicy.prioritizeUnhealthyInstances'
    package: '@azure/arm-compute'
    summary: >-
      Upgrade all unhealthy instances in a scale set before any healthy
      instances.
    fullName: prioritizeUnhealthyInstances
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'prioritizeUnhealthyInstances?: undefined | false | true'
      return:
        type: undefined | false | true
        description: ''
