### YamlMime:TSType
name: AzureReservationAPI
uid: '@azure/arm-reservations.AzureReservationAPI'
package: '@azure/arm-reservations'
summary: ''
fullName: AzureReservationAPI
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      AzureReservationAPI(ServiceClientCredentials,
      Models.AzureReservationAPIOptions)
    uid: '@azure/arm-reservations.AzureReservationAPI.constructor'
    package: '@azure/arm-reservations'
    summary: Initializes a new instance of the AzureReservationAPI class.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new AzureReservationAPI(credentials: ServiceClientCredentials, options?:
        Models.AzureReservationAPIOptions)
      parameters:
        - id: credentials
          type: ServiceClientCredentials
          description: Credentials needed for the client to connect to Azure.
        - id: options
          type: <xref uid="Models.AzureReservationAPIOptions" />
          description: ''
properties:
  - name: acceptLanguage
    uid: '@azure/arm-reservations.AzureReservationAPI.acceptLanguage'
    package: '@azure/arm-reservations'
    summary: ''
    fullName: acceptLanguage
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'acceptLanguage: string'
      return:
        type: string
        description: ''
  - name: calculateExchange
    uid: '@azure/arm-reservations.AzureReservationAPI.calculateExchange'
    package: '@azure/arm-reservations'
    summary: ''
    fullName: calculateExchange
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calculateExchange: CalculateExchange'
      return:
        type: <xref uid="@azure/arm-reservations.CalculateExchange" />
        description: ''
  - name: credentials
    uid: '@azure/arm-reservations.AzureReservationAPI.credentials'
    package: '@azure/arm-reservations'
    summary: ''
    fullName: credentials
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        type: ServiceClientCredentials
        description: ''
  - name: exchange
    uid: '@azure/arm-reservations.AzureReservationAPI.exchange'
    package: '@azure/arm-reservations'
    summary: ''
    fullName: exchange
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exchange: Exchange'
      return:
        type: <xref uid="@azure/arm-reservations.Exchange" />
        description: ''
  - name: longRunningOperationRetryTimeout
    uid: >-
      @azure/arm-reservations.AzureReservationAPI.longRunningOperationRetryTimeout
    package: '@azure/arm-reservations'
    summary: >-
      The retry timeout in seconds for Long Running Operations. Default value is
      30.
    fullName: longRunningOperationRetryTimeout
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'longRunningOperationRetryTimeout?: undefined | number'
      return:
        type: undefined | number
        description: ''
  - name: operation
    uid: '@azure/arm-reservations.AzureReservationAPI.operation'
    package: '@azure/arm-reservations'
    summary: ''
    fullName: operation
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'operation: Operation'
      return:
        type: <xref uid="@azure/arm-reservations.Operation" />
        description: ''
  - name: quota
    uid: '@azure/arm-reservations.AzureReservationAPI.quota'
    package: '@azure/arm-reservations'
    summary: ''
    fullName: quota
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'quota: Quota'
      return:
        type: <xref uid="@azure/arm-reservations.Quota" />
        description: ''
  - name: quotaRequestStatus
    uid: '@azure/arm-reservations.AzureReservationAPI.quotaRequestStatus'
    package: '@azure/arm-reservations'
    summary: ''
    fullName: quotaRequestStatus
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'quotaRequestStatus: QuotaRequestStatus'
      return:
        type: <xref uid="@azure/arm-reservations.QuotaRequestStatus" />
        description: ''
  - name: reservation
    uid: '@azure/arm-reservations.AzureReservationAPI.reservation'
    package: '@azure/arm-reservations'
    summary: ''
    fullName: reservation
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'reservation: Reservation'
      return:
        type: <xref uid="@azure/arm-reservations.Reservation" />
        description: ''
  - name: reservationOrder
    uid: '@azure/arm-reservations.AzureReservationAPI.reservationOrder'
    package: '@azure/arm-reservations'
    summary: ''
    fullName: reservationOrder
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'reservationOrder: ReservationOrder'
      return:
        type: <xref uid="@azure/arm-reservations.ReservationOrder" />
        description: ''
methods:
  - name: >-
      beginLongRunningRequest(RequestPrepareOptions | WebResource,
      RequestOptionsBase)
    uid: '@azure/arm-reservations.AzureReservationAPI.beginLongRunningRequest'
    package: '@azure/arm-reservations'
    summary: >-
      Send the initial request of a LRO (long running operation) and get back an

      HttpLongRunningOperationResponse that provides methods for polling the LRO
      and checking if the

      LRO is finished.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginLongRunningRequest(request: RequestPrepareOptions |
        WebResource, options?: RequestOptionsBase)
      parameters:
        - id: request
          type: RequestPrepareOptions | WebResource
          description: The request object
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: |-
          The HttpLongRunningOperationResponse
          that provides methods for interacting with the LRO.
  - name: 'getAppliedReservationList(string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-reservations.AzureReservationAPI.getAppliedReservationList'
    package: '@azure/arm-reservations'
    summary: >-
      Get applicable `Reservation`s that are applied to this subscription or a
      resource group under

      this subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAppliedReservationList(subscriptionId: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: subscriptionId
          type: string
          description: Id of the subscription
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.GetAppliedReservationListResponse" />&gt;
        description: Promise<Models.GetAppliedReservationListResponse>
  - name: >-
      getAppliedReservationList(string, RequestOptionsBase,
      ServiceCallback<AppliedReservations>)
    uid: '@azure/arm-reservations.AzureReservationAPI.getAppliedReservationList_2'
    package: '@azure/arm-reservations'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAppliedReservationList(subscriptionId: string, options:
        RequestOptionsBase, callback: ServiceCallback<AppliedReservations>)
      parameters:
        - id: subscriptionId
          type: string
          description: Id of the subscription
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-reservations.AppliedReservations" />&gt;
          description: |
            The callback
  - name: 'getAppliedReservationList(string, ServiceCallback<AppliedReservations>)'
    uid: '@azure/arm-reservations.AzureReservationAPI.getAppliedReservationList_1'
    package: '@azure/arm-reservations'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAppliedReservationList(subscriptionId: string, callback:
        ServiceCallback<AppliedReservations>)
      parameters:
        - id: subscriptionId
          type: string
          description: Id of the subscription
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-reservations.AppliedReservations" />&gt;
          description: |
            The callback
  - name: >-
      getCatalog(string, string, AzureReservationAPIGetCatalogOptionalParams,
      ServiceCallback<Catalog[]>)
    uid: '@azure/arm-reservations.AzureReservationAPI.getCatalog_2'
    package: '@azure/arm-reservations'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getCatalog(subscriptionId: string, reservedResourceType:
        string, options: AzureReservationAPIGetCatalogOptionalParams, callback:
        ServiceCallback<Catalog[]>)
      parameters:
        - id: subscriptionId
          type: string
          description: Id of the subscription
        - id: reservedResourceType
          type: string
          description: The type of the resource for which the skus should be provided.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-reservations.AzureReservationAPIGetCatalogOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-reservations.Catalog"
            />[]&gt;
          description: |
            The callback
  - name: >-
      getCatalog(string, string,
      Models.AzureReservationAPIGetCatalogOptionalParams)
    uid: '@azure/arm-reservations.AzureReservationAPI.getCatalog'
    package: '@azure/arm-reservations'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getCatalog(subscriptionId: string, reservedResourceType:
        string, options?: Models.AzureReservationAPIGetCatalogOptionalParams)
      parameters:
        - id: subscriptionId
          type: string
          description: Id of the subscription
        - id: reservedResourceType
          type: string
          description: The type of the resource for which the skus should be provided.
        - id: options
          type: <xref uid="Models.AzureReservationAPIGetCatalogOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.GetCatalogResponse" />&gt;
        description: Promise<Models.GetCatalogResponse>
  - name: 'getCatalog(string, string, ServiceCallback<Catalog[]>)'
    uid: '@azure/arm-reservations.AzureReservationAPI.getCatalog_1'
    package: '@azure/arm-reservations'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getCatalog(subscriptionId: string, reservedResourceType:
        string, callback: ServiceCallback<Catalog[]>)
      parameters:
        - id: subscriptionId
          type: string
          description: Id of the subscription
        - id: reservedResourceType
          type: string
          description: The type of the resource for which the skus should be provided.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-reservations.Catalog"
            />[]&gt;
          description: |
            The callback
  - name: restoreLROPoller(LROPollState)
    uid: '@azure/arm-reservations.AzureReservationAPI.restoreLROPoller'
    package: '@azure/arm-reservations'
    summary: >-
      Restore an LROPoller from the provided LROPollState. This method can be
      used to recreate an

      LROPoller on a different process or machine.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function restoreLROPoller(lroPollState: LROPollState)'
      parameters:
        - id: lroPollState
          type: LROPollState
          description: ''
      return:
        type: LROPoller
        description: ''
  - name: >-
      sendLongRunningRequest(RequestPrepareOptions | WebResource,
      RequestOptionsBase)
    uid: '@azure/arm-reservations.AzureReservationAPI.sendLongRunningRequest'
    package: '@azure/arm-reservations'
    summary: >-
      Provides a mechanism to make a request that will poll and provide the
      final result.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendLongRunningRequest(request: RequestPrepareOptions |
        WebResource, options?: RequestOptionsBase)
      parameters:
        - id: request
          type: RequestPrepareOptions | WebResource
          description: The request object
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        type: Promise&lt;HttpOperationResponse&gt;
        description: >-
          The HttpOperationResponse containing the final polling request,
          response and the responseBody.
  - name: 'sendLRORequest(OperationArguments, OperationSpec, RequestOptionsBase)'
    uid: '@azure/arm-reservations.AzureReservationAPI.sendLRORequest'
    package: '@azure/arm-reservations'
    summary: >-
      Send the initial request of a LRO (long running operation) and get back an

      LROPoller that provides methods for polling the LRO and checking if the
      LRO is finished.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendLRORequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, options?: RequestOptionsBase)
      parameters:
        - id: operationArguments
          type: OperationArguments
          description: The arguments to the operation.
        - id: operationSpec
          type: OperationSpec
          description: The specification for the operation.
        - id: options
          type: RequestOptionsBase
          description: Additional options to be sent while making the request.
      return:
        type: Promise&lt;LROPoller&gt;
        description: >-
          The LROPoller object that provides methods for interacting with the
          LRO.
  - name: >-
      sendOperationRequest(OperationArguments, OperationSpec,
      ServiceCallback<any>)
    uid: '@azure/arm-reservations.AzureReservationAPI.sendOperationRequest'
    package: '@azure/arm-reservations'
    summary: Send an HTTP request that is populated using the provided OperationSpec.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendOperationRequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, callback?: ServiceCallback<any>)
      parameters:
        - id: operationArguments
          type: OperationArguments
          description: >-
            The arguments that the HTTP request's templated values will be
            populated from.
        - id: operationSpec
          type: OperationSpec
          description: The OperationSpec to use to populate the httpRequest.
        - id: callback
          type: ServiceCallback&lt;any&gt;
          description: |
            The callback to call when the response is received.
      return:
        type: Promise&lt;RestResponse&gt;
        description: ''
  - name: sendRequest(RequestPrepareOptions | WebResourceLike)
    uid: '@azure/arm-reservations.AzureReservationAPI.sendRequest'
    package: '@azure/arm-reservations'
    summary: Send the provided httpRequest.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResourceLike)'
      parameters:
        - id: options
          type: RequestPrepareOptions | WebResourceLike
          description: ''
      return:
        type: Promise&lt;HttpOperationResponse&gt;
        description: ''
extends: <xref uid="@azure/arm-reservations.AzureReservationAPIContext" />
