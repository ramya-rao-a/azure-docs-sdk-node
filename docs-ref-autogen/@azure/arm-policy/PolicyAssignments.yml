### YamlMime:TSType
name: PolicyAssignments
uid: '@azure/arm-policy.PolicyAssignments'
package: '@azure/arm-policy'
summary: Class representing a PolicyAssignments.
fullName: PolicyAssignments
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: PolicyAssignments(PolicyClientContext)
    uid: '@azure/arm-policy.PolicyAssignments.constructor'
    package: '@azure/arm-policy'
    summary: Create a PolicyAssignments.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new PolicyAssignments(client: PolicyClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/arm-policy.PolicyClientContext" />
          description: |
            Reference to the service client.
methods:
  - name: 'create(string, string, PolicyAssignment, msRest.RequestOptionsBase)'
    uid: '@azure/arm-policy.PolicyAssignments.create'
    package: '@azure/arm-policy'
    summary: >-
      This operation creates or updates a policy assignment with the given scope
      and name. Policy

      assignments apply to all resources contained within their scope. For
      example, when you assign a

      policy at resource group scope, that policy applies to all resources in
      the group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(scope: string, policyAssignmentName: string, parameters:
        PolicyAssignment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy assignment. Valid scopes are: management
            group (format:

            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format:

            '/subscriptions/{subscriptionId}'), resource group (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}',
            or resource (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyAssignmentName
          type: string
          description: The name of the policy assignment.
        - id: parameters
          type: <xref uid="@azure/arm-policy.PolicyAssignment" />
          description: Parameters for the policy assignment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.PolicyAssignmentsCreateResponse" />&gt;
        description: Promise<Models.PolicyAssignmentsCreateResponse>
  - name: >-
      create(string, string, PolicyAssignment, RequestOptionsBase,
      ServiceCallback<PolicyAssignment>)
    uid: '@azure/arm-policy.PolicyAssignments.create_2'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(scope: string, policyAssignmentName: string, parameters:
        PolicyAssignment, options: RequestOptionsBase, callback:
        ServiceCallback<PolicyAssignment>)
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy assignment. Valid scopes are: management
            group (format:

            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format:

            '/subscriptions/{subscriptionId}'), resource group (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}',
            or resource (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyAssignmentName
          type: string
          description: The name of the policy assignment.
        - id: parameters
          type: <xref uid="@azure/arm-policy.PolicyAssignment" />
          description: Parameters for the policy assignment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-policy.PolicyAssignment"
            />&gt;
          description: |
            The callback
  - name: >-
      create(string, string, PolicyAssignment,
      ServiceCallback<PolicyAssignment>)
    uid: '@azure/arm-policy.PolicyAssignments.create_1'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(scope: string, policyAssignmentName: string, parameters:
        PolicyAssignment, callback: ServiceCallback<PolicyAssignment>)
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy assignment. Valid scopes are: management
            group (format:

            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format:

            '/subscriptions/{subscriptionId}'), resource group (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}',
            or resource (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyAssignmentName
          type: string
          description: The name of the policy assignment.
        - id: parameters
          type: <xref uid="@azure/arm-policy.PolicyAssignment" />
          description: Parameters for the policy assignment.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-policy.PolicyAssignment"
            />&gt;
          description: |
            The callback
  - name: 'createById(string, PolicyAssignment, msRest.RequestOptionsBase)'
    uid: '@azure/arm-policy.PolicyAssignments.createById'
    package: '@azure/arm-policy'
    summary: >-
      This operation creates or updates the policy assignment with the given ID.
      Policy assignments

      made on a scope apply to all resources contained in that scope. For
      example, when you assign a

      policy to a resource group that policy applies to all resources in the
      group. Policy assignment

      IDs have this format:

      '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
      Valid

      scopes are: management group (format:

      '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
      subscription (format:

      '/subscriptions/{subscriptionId}'), resource group (format:

      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
      resource (format:

      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createById(policyAssignmentId: string, parameters:
        PolicyAssignment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: policyAssignmentId
          type: string
          description: >-
            The ID of the policy assignment to create. Use the format

            '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
        - id: parameters
          type: <xref uid="@azure/arm-policy.PolicyAssignment" />
          description: Parameters for policy assignment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.PolicyAssignmentsCreateByIdResponse"
          />&gt;
        description: Promise<Models.PolicyAssignmentsCreateByIdResponse>
  - name: >-
      createById(string, PolicyAssignment, RequestOptionsBase,
      ServiceCallback<PolicyAssignment>)
    uid: '@azure/arm-policy.PolicyAssignments.createById_2'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createById(policyAssignmentId: string, parameters:
        PolicyAssignment, options: RequestOptionsBase, callback:
        ServiceCallback<PolicyAssignment>)
      parameters:
        - id: policyAssignmentId
          type: string
          description: >-
            The ID of the policy assignment to create. Use the format

            '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
        - id: parameters
          type: <xref uid="@azure/arm-policy.PolicyAssignment" />
          description: Parameters for policy assignment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-policy.PolicyAssignment"
            />&gt;
          description: |
            The callback
  - name: 'createById(string, PolicyAssignment, ServiceCallback<PolicyAssignment>)'
    uid: '@azure/arm-policy.PolicyAssignments.createById_1'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createById(policyAssignmentId: string, parameters:
        PolicyAssignment, callback: ServiceCallback<PolicyAssignment>)
      parameters:
        - id: policyAssignmentId
          type: string
          description: >-
            The ID of the policy assignment to create. Use the format

            '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
        - id: parameters
          type: <xref uid="@azure/arm-policy.PolicyAssignment" />
          description: Parameters for policy assignment.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-policy.PolicyAssignment"
            />&gt;
          description: |
            The callback
  - name: 'deleteById(string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-policy.PolicyAssignments.deleteById'
    package: '@azure/arm-policy'
    summary: >-
      This operation deletes the policy with the given ID. Policy assignment IDs
      have this format:

      '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
      Valid

      formats for {scope} are:
      '/providers/Microsoft.Management/managementGroups/{managementGroup}'

      (management group), '/subscriptions/{subscriptionId}' (subscription),

      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
      (resource group), or

      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'

      (resource).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteById(policyAssignmentId: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: policyAssignmentId
          type: string
          description: >-
            The ID of the policy assignment to delete. Use the format

            '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.PolicyAssignmentsDeleteByIdResponse"
          />&gt;
        description: Promise<Models.PolicyAssignmentsDeleteByIdResponse>
  - name: 'deleteById(string, RequestOptionsBase, ServiceCallback<PolicyAssignment>)'
    uid: '@azure/arm-policy.PolicyAssignments.deleteById_2'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteById(policyAssignmentId: string, options:
        RequestOptionsBase, callback: ServiceCallback<PolicyAssignment>)
      parameters:
        - id: policyAssignmentId
          type: string
          description: >-
            The ID of the policy assignment to delete. Use the format

            '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-policy.PolicyAssignment"
            />&gt;
          description: |
            The callback
  - name: 'deleteById(string, ServiceCallback<PolicyAssignment>)'
    uid: '@azure/arm-policy.PolicyAssignments.deleteById_1'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteById(policyAssignmentId: string, callback:
        ServiceCallback<PolicyAssignment>)
      parameters:
        - id: policyAssignmentId
          type: string
          description: >-
            The ID of the policy assignment to delete. Use the format

            '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-policy.PolicyAssignment"
            />&gt;
          description: |
            The callback
  - name: 'deleteMethod(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-policy.PolicyAssignments.deleteMethod'
    package: '@azure/arm-policy'
    summary: >-
      This operation deletes a policy assignment, given its name and the scope
      it was created in. The

      scope of a policy assignment is the part of its ID preceding

      '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(scope: string, policyAssignmentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy assignment. Valid scopes are: management
            group (format:

            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format:

            '/subscriptions/{subscriptionId}'), resource group (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}',
            or resource (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyAssignmentName
          type: string
          description: The name of the policy assignment to delete.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.PolicyAssignmentsDeleteMethodResponse"
          />&gt;
        description: Promise<Models.PolicyAssignmentsDeleteMethodResponse>
  - name: >-
      deleteMethod(string, string, RequestOptionsBase,
      ServiceCallback<PolicyAssignment>)
    uid: '@azure/arm-policy.PolicyAssignments.deleteMethod_2'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(scope: string, policyAssignmentName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<PolicyAssignment>)
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy assignment. Valid scopes are: management
            group (format:

            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format:

            '/subscriptions/{subscriptionId}'), resource group (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}',
            or resource (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyAssignmentName
          type: string
          description: The name of the policy assignment to delete.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-policy.PolicyAssignment"
            />&gt;
          description: |
            The callback
  - name: 'deleteMethod(string, string, ServiceCallback<PolicyAssignment>)'
    uid: '@azure/arm-policy.PolicyAssignments.deleteMethod_1'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(scope: string, policyAssignmentName: string,
        callback: ServiceCallback<PolicyAssignment>)
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy assignment. Valid scopes are: management
            group (format:

            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format:

            '/subscriptions/{subscriptionId}'), resource group (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}',
            or resource (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyAssignmentName
          type: string
          description: The name of the policy assignment to delete.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-policy.PolicyAssignment"
            />&gt;
          description: |
            The callback
  - name: 'get(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-policy.PolicyAssignments.get'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves a single policy assignment, given its name and
      the scope it was created

      at.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(scope: string, policyAssignmentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy assignment. Valid scopes are: management
            group (format:

            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format:

            '/subscriptions/{subscriptionId}'), resource group (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}',
            or resource (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyAssignmentName
          type: string
          description: The name of the policy assignment to get.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.PolicyAssignmentsGetResponse" />&gt;
        description: Promise<Models.PolicyAssignmentsGetResponse>
  - name: 'get(string, string, RequestOptionsBase, ServiceCallback<PolicyAssignment>)'
    uid: '@azure/arm-policy.PolicyAssignments.get_2'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(scope: string, policyAssignmentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<PolicyAssignment>)
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy assignment. Valid scopes are: management
            group (format:

            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format:

            '/subscriptions/{subscriptionId}'), resource group (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}',
            or resource (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyAssignmentName
          type: string
          description: The name of the policy assignment to get.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-policy.PolicyAssignment"
            />&gt;
          description: |
            The callback
  - name: 'get(string, string, ServiceCallback<PolicyAssignment>)'
    uid: '@azure/arm-policy.PolicyAssignments.get_1'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(scope: string, policyAssignmentName: string, callback:
        ServiceCallback<PolicyAssignment>)
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy assignment. Valid scopes are: management
            group (format:

            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format:

            '/subscriptions/{subscriptionId}'), resource group (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}',
            or resource (format:

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyAssignmentName
          type: string
          description: The name of the policy assignment to get.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-policy.PolicyAssignment"
            />&gt;
          description: |
            The callback
  - name: 'getById(string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-policy.PolicyAssignments.getById'
    package: '@azure/arm-policy'
    summary: >-
      The operation retrieves the policy assignment with the given ID. Policy
      assignment IDs have this

      format:
      '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.

      Valid scopes are: management group (format:

      '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
      subscription (format:

      '/subscriptions/{subscriptionId}'), resource group (format:

      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
      resource (format:

      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getById(policyAssignmentId: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: policyAssignmentId
          type: string
          description: >-
            The ID of the policy assignment to get. Use the format

            '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.PolicyAssignmentsGetByIdResponse" />&gt;
        description: Promise<Models.PolicyAssignmentsGetByIdResponse>
  - name: 'getById(string, RequestOptionsBase, ServiceCallback<PolicyAssignment>)'
    uid: '@azure/arm-policy.PolicyAssignments.getById_2'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getById(policyAssignmentId: string, options:
        RequestOptionsBase, callback: ServiceCallback<PolicyAssignment>)
      parameters:
        - id: policyAssignmentId
          type: string
          description: >-
            The ID of the policy assignment to get. Use the format

            '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-policy.PolicyAssignment"
            />&gt;
          description: |
            The callback
  - name: 'getById(string, ServiceCallback<PolicyAssignment>)'
    uid: '@azure/arm-policy.PolicyAssignments.getById_1'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getById(policyAssignmentId: string, callback:
        ServiceCallback<PolicyAssignment>)
      parameters:
        - id: policyAssignmentId
          type: string
          description: >-
            The ID of the policy assignment to get. Use the format

            '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-policy.PolicyAssignment"
            />&gt;
          description: |
            The callback
  - name: list(Models.PolicyAssignmentsListOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.list'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy assignments associated
      with the given

      subscription that match the optional given $filter. Valid values for
      $filter are: 'atScope()' or

      'policyDefinitionId eq '{value}''. If $filter is not provided, the
      unfiltered list includes all

      policy assignments associated with the subscription, including those that
      apply directly or from

      management groups that contain the given subscription, as well as any
      applied to objects

      contained within the subscription. If $filter=atScope() is provided, the
      returned list includes

      all policy assignments that apply to the subscription, which is everything
      in the unfiltered

      list except those applied to objects contained within the subscription. If

      $filter=policyDefinitionId eq '{value}' is provided, the returned list
      includes all policy

      assignments of the policy definition whose id is {value}.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function list(options?: Models.PolicyAssignmentsListOptionalParams)'
      parameters:
        - id: options
          type: <xref uid="Models.PolicyAssignmentsListOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.PolicyAssignmentsListResponse" />&gt;
        description: Promise<Models.PolicyAssignmentsListResponse>
  - name: >-
      list(PolicyAssignmentsListOptionalParams,
      ServiceCallback<PolicyAssignmentListResult>)
    uid: '@azure/arm-policy.PolicyAssignments.list_2'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function list(options: PolicyAssignmentsListOptionalParams, callback:
        ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: options
          type: <xref uid="@azure/arm-policy.PolicyAssignmentsListOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: list(ServiceCallback<PolicyAssignmentListResult>)
    uid: '@azure/arm-policy.PolicyAssignments.list_1'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function list(callback: ServiceCallback<PolicyAssignmentListResult>)'
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: 'listForManagementGroup(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-policy.PolicyAssignments.listForManagementGroup'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy assignments applicable to
      the management group

      that match the given $filter. Valid values for $filter are: 'atScope()' or
      'policyDefinitionId

      eq '{value}''. If $filter=atScope() is provided, the returned list
      includes all policy

      assignments that are assigned to the management group or the management
      group's ancestors. If

      $filter=policyDefinitionId eq '{value}' is provided, the returned list
      includes all policy

      assignments of the policy definition whose id is {value} that apply to the
      management group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForManagementGroup(managementGroupId: string, filter:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: managementGroupId
          type: string
          description: The ID of the management group.
        - id: filter
          type: string
          description: >-
            The filter to apply on the operation. Valid values for $filter are:
            'atScope()' or

            'policyDefinitionId eq '{value}''. A filter is required when listing
            policy assignments at

            management group scope.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.PolicyAssignmentsListForManagementGroupResponse" />&gt;
        description: Promise<Models.PolicyAssignmentsListForManagementGroupResponse>
  - name: >-
      listForManagementGroup(string, string, RequestOptionsBase,
      ServiceCallback<PolicyAssignmentListResult>)
    uid: '@azure/arm-policy.PolicyAssignments.listForManagementGroup_2'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForManagementGroup(managementGroupId: string, filter:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: managementGroupId
          type: string
          description: The ID of the management group.
        - id: filter
          type: string
          description: >-
            The filter to apply on the operation. Valid values for $filter are:
            'atScope()' or

            'policyDefinitionId eq '{value}''. A filter is required when listing
            policy assignments at

            management group scope.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: >-
      listForManagementGroup(string, string,
      ServiceCallback<PolicyAssignmentListResult>)
    uid: '@azure/arm-policy.PolicyAssignments.listForManagementGroup_1'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForManagementGroup(managementGroupId: string, filter:
        string, callback: ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: managementGroupId
          type: string
          description: The ID of the management group.
        - id: filter
          type: string
          description: >-
            The filter to apply on the operation. Valid values for $filter are:
            'atScope()' or

            'policyDefinitionId eq '{value}''. A filter is required when listing
            policy assignments at

            management group scope.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: 'listForManagementGroupNext(string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-policy.PolicyAssignments.listForManagementGroupNext'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy assignments applicable to
      the management group

      that match the given $filter. Valid values for $filter are: 'atScope()' or
      'policyDefinitionId

      eq '{value}''. If $filter=atScope() is provided, the returned list
      includes all policy

      assignments that are assigned to the management group or the management
      group's ancestors. If

      $filter=policyDefinitionId eq '{value}' is provided, the returned list
      includes all policy

      assignments of the policy definition whose id is {value} that apply to the
      management group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForManagementGroupNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.PolicyAssignmentsListForManagementGroupNextResponse"
          />&gt;
        description: Promise<Models.PolicyAssignmentsListForManagementGroupNextResponse>
  - name: >-
      listForManagementGroupNext(string, RequestOptionsBase,
      ServiceCallback<PolicyAssignmentListResult>)
    uid: '@azure/arm-policy.PolicyAssignments.listForManagementGroupNext_2'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForManagementGroupNext(nextPageLink: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: >-
      listForManagementGroupNext(string,
      ServiceCallback<PolicyAssignmentListResult>)
    uid: '@azure/arm-policy.PolicyAssignments.listForManagementGroupNext_1'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForManagementGroupNext(nextPageLink: string, callback:
        ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: >-
      listForResource(string, string, string, string, string,
      Models.PolicyAssignmentsListForResourceOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.listForResource'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy assignments associated
      with the specified

      resource in the given resource group and subscription that match the
      optional given $filter.

      Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq
      '{value}''. If $filter is

      not provided, the unfiltered list includes all policy assignments
      associated with the resource,

      including those that apply directly or from all containing scopes, as well
      as any applied to

      resources contained within the resource. If $filter=atScope() is provided,
      the returned list

      includes all policy assignments that apply to the resource, which is
      everything in the

      unfiltered list except those applied to resources contained within the
      resource. If

      $filter=policyDefinitionId eq '{value}' is provided, the returned list
      includes all policy

      assignments of the policy definition whose id is {value} that apply to the
      resource. Three

      parameters plus the resource name are used to identify a specific
      resource. If the resource is

      not part of a parent resource (the more common case), the parent resource
      path should not be

      provided (or provided as ''). For example a web app could be specified as

      ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} ==
      '', {resourceType} ==

      'sites', {resourceName} == 'MyWebApp'). If the resource is part of a
      parent resource, then all

      parameters should be provided. For example a virtual machine DNS name
      could be specified as

      ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath}
      ==

      'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
      {resourceName} ==

      'MyComputerName'). A convenient alternative to providing the namespace and
      type name separately

      is to provide both in the {resourceType} parameter, format:
      ({resourceProviderNamespace} == '',

      {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
      {resourceName} ==

      'MyWebApp').
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForResource(resourceGroupName: string,
        resourceProviderNamespace: string, parentResourcePath: string,
        resourceType: string, resourceName: string, options?:
        Models.PolicyAssignmentsListForResourceOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group containing the resource.
        - id: resourceProviderNamespace
          type: string
          description: >-
            The namespace of the resource provider. For example, the

            namespace of a virtual machine is Microsoft.Compute (from
            Microsoft.Compute/virtualMachines)
        - id: parentResourcePath
          type: string
          description: The parent resource path. Use empty string if there is none.
        - id: resourceType
          type: string
          description: >-
            The resource type name. For example the type name of a web app is
            'sites'

            (from Microsoft.Web/sites).
        - id: resourceName
          type: string
          description: The name of the resource.
        - id: options
          type: <xref uid="Models.PolicyAssignmentsListForResourceOptionalParams" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.PolicyAssignmentsListForResourceResponse"
          />&gt;
        description: Promise<Models.PolicyAssignmentsListForResourceResponse>
  - name: >-
      listForResource(string, string, string, string, string,
      PolicyAssignmentsListForResourceOptionalParams,
      ServiceCallback<PolicyAssignmentListResult>)
    uid: '@azure/arm-policy.PolicyAssignments.listForResource_2'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForResource(resourceGroupName: string,
        resourceProviderNamespace: string, parentResourcePath: string,
        resourceType: string, resourceName: string, options:
        PolicyAssignmentsListForResourceOptionalParams, callback:
        ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group containing the resource.
        - id: resourceProviderNamespace
          type: string
          description: >-
            The namespace of the resource provider. For example, the

            namespace of a virtual machine is Microsoft.Compute (from
            Microsoft.Compute/virtualMachines)
        - id: parentResourcePath
          type: string
          description: The parent resource path. Use empty string if there is none.
        - id: resourceType
          type: string
          description: >-
            The resource type name. For example the type name of a web app is
            'sites'

            (from Microsoft.Web/sites).
        - id: resourceName
          type: string
          description: The name of the resource.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-policy.PolicyAssignmentsListForResourceOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: >-
      listForResource(string, string, string, string, string,
      ServiceCallback<PolicyAssignmentListResult>)
    uid: '@azure/arm-policy.PolicyAssignments.listForResource_1'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForResource(resourceGroupName: string,
        resourceProviderNamespace: string, parentResourcePath: string,
        resourceType: string, resourceName: string, callback:
        ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group containing the resource.
        - id: resourceProviderNamespace
          type: string
          description: >-
            The namespace of the resource provider. For example, the

            namespace of a virtual machine is Microsoft.Compute (from
            Microsoft.Compute/virtualMachines)
        - id: parentResourcePath
          type: string
          description: The parent resource path. Use empty string if there is none.
        - id: resourceType
          type: string
          description: >-
            The resource type name. For example the type name of a web app is
            'sites'

            (from Microsoft.Web/sites).
        - id: resourceName
          type: string
          description: The name of the resource.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: >-
      listForResourceGroup(string,
      Models.PolicyAssignmentsListForResourceGroupOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.listForResourceGroup'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy assignments associated
      with the given resource

      group in the given subscription that match the optional given $filter.
      Valid values for $filter

      are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not
      provided, the

      unfiltered list includes all policy assignments associated with the
      resource group, including

      those that apply directly or apply from containing scopes, as well as any
      applied to resources

      contained within the resource group. If $filter=atScope() is provided, the
      returned list

      includes all policy assignments that apply to the resource group, which is
      everything in the

      unfiltered list except those applied to resources contained within the
      resource group. If

      $filter=policyDefinitionId eq '{value}' is provided, the returned list
      includes all policy

      assignments of the policy definition whose id is {value} that apply to the
      resource group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForResourceGroup(resourceGroupName: string, options?:
        Models.PolicyAssignmentsListForResourceGroupOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group that contains policy assignments.
        - id: options
          type: >-
            <xref
            uid="Models.PolicyAssignmentsListForResourceGroupOptionalParams" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.PolicyAssignmentsListForResourceGroupResponse" />&gt;
        description: Promise<Models.PolicyAssignmentsListForResourceGroupResponse>
  - name: >-
      listForResourceGroup(string,
      PolicyAssignmentsListForResourceGroupOptionalParams,
      ServiceCallback<PolicyAssignmentListResult>)
    uid: '@azure/arm-policy.PolicyAssignments.listForResourceGroup_2'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForResourceGroup(resourceGroupName: string, options:
        PolicyAssignmentsListForResourceGroupOptionalParams, callback:
        ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group that contains policy assignments.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-policy.PolicyAssignmentsListForResourceGroupOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: 'listForResourceGroup(string, ServiceCallback<PolicyAssignmentListResult>)'
    uid: '@azure/arm-policy.PolicyAssignments.listForResourceGroup_1'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForResourceGroup(resourceGroupName: string, callback:
        ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group that contains policy assignments.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: 'listForResourceGroupNext(string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-policy.PolicyAssignments.listForResourceGroupNext'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy assignments associated
      with the given resource

      group in the given subscription that match the optional given $filter.
      Valid values for $filter

      are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not
      provided, the

      unfiltered list includes all policy assignments associated with the
      resource group, including

      those that apply directly or apply from containing scopes, as well as any
      applied to resources

      contained within the resource group. If $filter=atScope() is provided, the
      returned list

      includes all policy assignments that apply to the resource group, which is
      everything in the

      unfiltered list except those applied to resources contained within the
      resource group. If

      $filter=policyDefinitionId eq '{value}' is provided, the returned list
      includes all policy

      assignments of the policy definition whose id is {value} that apply to the
      resource group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForResourceGroupNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.PolicyAssignmentsListForResourceGroupNextResponse" />&gt;
        description: Promise<Models.PolicyAssignmentsListForResourceGroupNextResponse>
  - name: >-
      listForResourceGroupNext(string, RequestOptionsBase,
      ServiceCallback<PolicyAssignmentListResult>)
    uid: '@azure/arm-policy.PolicyAssignments.listForResourceGroupNext_2'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForResourceGroupNext(nextPageLink: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: >-
      listForResourceGroupNext(string,
      ServiceCallback<PolicyAssignmentListResult>)
    uid: '@azure/arm-policy.PolicyAssignments.listForResourceGroupNext_1'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForResourceGroupNext(nextPageLink: string, callback:
        ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: 'listForResourceNext(string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-policy.PolicyAssignments.listForResourceNext'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy assignments associated
      with the specified

      resource in the given resource group and subscription that match the
      optional given $filter.

      Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq
      '{value}''. If $filter is

      not provided, the unfiltered list includes all policy assignments
      associated with the resource,

      including those that apply directly or from all containing scopes, as well
      as any applied to

      resources contained within the resource. If $filter=atScope() is provided,
      the returned list

      includes all policy assignments that apply to the resource, which is
      everything in the

      unfiltered list except those applied to resources contained within the
      resource. If

      $filter=policyDefinitionId eq '{value}' is provided, the returned list
      includes all policy

      assignments of the policy definition whose id is {value} that apply to the
      resource. Three

      parameters plus the resource name are used to identify a specific
      resource. If the resource is

      not part of a parent resource (the more common case), the parent resource
      path should not be

      provided (or provided as ''). For example a web app could be specified as

      ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} ==
      '', {resourceType} ==

      'sites', {resourceName} == 'MyWebApp'). If the resource is part of a
      parent resource, then all

      parameters should be provided. For example a virtual machine DNS name
      could be specified as

      ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath}
      ==

      'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
      {resourceName} ==

      'MyComputerName'). A convenient alternative to providing the namespace and
      type name separately

      is to provide both in the {resourceType} parameter, format:
      ({resourceProviderNamespace} == '',

      {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
      {resourceName} ==

      'MyWebApp').
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForResourceNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.PolicyAssignmentsListForResourceNextResponse" />&gt;
        description: Promise<Models.PolicyAssignmentsListForResourceNextResponse>
  - name: >-
      listForResourceNext(string, RequestOptionsBase,
      ServiceCallback<PolicyAssignmentListResult>)
    uid: '@azure/arm-policy.PolicyAssignments.listForResourceNext_2'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForResourceNext(nextPageLink: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: 'listForResourceNext(string, ServiceCallback<PolicyAssignmentListResult>)'
    uid: '@azure/arm-policy.PolicyAssignments.listForResourceNext_1'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listForResourceNext(nextPageLink: string, callback:
        ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: 'listNext(string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-policy.PolicyAssignments.listNext'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy assignments associated
      with the given

      subscription that match the optional given $filter. Valid values for
      $filter are: 'atScope()' or

      'policyDefinitionId eq '{value}''. If $filter is not provided, the
      unfiltered list includes all

      policy assignments associated with the subscription, including those that
      apply directly or from

      management groups that contain the given subscription, as well as any
      applied to objects

      contained within the subscription. If $filter=atScope() is provided, the
      returned list includes

      all policy assignments that apply to the subscription, which is everything
      in the unfiltered

      list except those applied to objects contained within the subscription. If

      $filter=policyDefinitionId eq '{value}' is provided, the returned list
      includes all policy

      assignments of the policy definition whose id is {value}.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.PolicyAssignmentsListNextResponse" />&gt;
        description: Promise<Models.PolicyAssignmentsListNextResponse>
  - name: >-
      listNext(string, RequestOptionsBase,
      ServiceCallback<PolicyAssignmentListResult>)
    uid: '@azure/arm-policy.PolicyAssignments.listNext_2'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, options: RequestOptionsBase,
        callback: ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
  - name: 'listNext(string, ServiceCallback<PolicyAssignmentListResult>)'
    uid: '@azure/arm-policy.PolicyAssignments.listNext_1'
    package: '@azure/arm-policy'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, callback:
        ServiceCallback<PolicyAssignmentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-policy.PolicyAssignmentListResult" />&gt;
          description: |
            The callback
