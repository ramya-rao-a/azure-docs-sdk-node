### YamlMime:TSType
name: Reviews
uid: '@azure/cognitiveservices-contentmoderator.Reviews'
package: '@azure/cognitiveservices-contentmoderator'
summary: Class representing a Reviews.
fullName: Reviews
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: Reviews(ContentModeratorClientContext)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.constructor'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: Create a Reviews.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new Reviews(client: ContentModeratorClientContext)'
      parameters:
        - id: client
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ContentModeratorClientContext"
            />
          description: |
            Reference to the service client.
methods:
  - name: 'addVideoFrame(string, string, Models.ReviewsAddVideoFrameOptionalParams)'
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.addVideoFrame'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      The reviews created would show up for Reviewers on your team. As Reviewers
      complete reviewing,

      results of the Review would be POSTED (i.e. HTTP POST) on the specified
      CallBackEndpoint.

      <h3>CallBack Schemas </h3>

      <h4>Review Completion CallBack Sample</h4>

      <p>

      {<br/>

      "ReviewId": "<Review Id>",<br/>

      "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>

      "ModifiedBy": "<Name of the Reviewer>",<br/>

      "CallBackType": "Review",<br/>

      "ContentId": "<The ContentId that was specified input>",<br/>

      "Metadata": {<br/>

      "adultscore": "0.xxx",<br/>

      "a": "False",<br/>

      "racyscore": "0.xxx",<br/>

      "r": "True"<br/>

      },<br/>

      "ReviewerResultTags": {<br/>

      "a": "False",<br/>

      "r": "True"<br/>

      }<br/>

      }<br/>


      </p>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoFrame(teamName: string, reviewId: string, options?:
        Models.ReviewsAddVideoFrameOptionalParams)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: options
          type: <xref uid="Models.ReviewsAddVideoFrameOptionalParams" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: >-
      addVideoFrame(string, string, ReviewsAddVideoFrameOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.addVideoFrame_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoFrame(teamName: string, reviewId: string, options:
        ReviewsAddVideoFrameOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ReviewsAddVideoFrameOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'addVideoFrame(string, string, ServiceCallback<void>)'
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.addVideoFrame_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoFrame(teamName: string, reviewId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      addVideoFrameStream(string, string, string, msRest.HttpRequestBody,
      string, Models.ReviewsAddVideoFrameStreamOptionalParams)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.addVideoFrameStream'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      Use this method to add frames for a video review.Timescale: This parameter
      is a factor which is

      used to convert the timestamp on a frame into milliseconds. Timescale is
      provided in the output

      of the Content Moderator video media processor on the Azure Media Services
      platform.Timescale in

      the Video Moderation output is Ticks/Second.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoFrameStream(contentType: string, teamName: string,
        reviewId: string, frameImageZip: msRest.HttpRequestBody, frameMetadata:
        string, options?: Models.ReviewsAddVideoFrameStreamOptionalParams)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: frameImageZip
          type: <xref uid="msRest.HttpRequestBody" />
          description: Zip file containing frame images.
        - id: frameMetadata
          type: string
          description: Metadata of the frame.
        - id: options
          type: <xref uid="Models.ReviewsAddVideoFrameStreamOptionalParams" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: >-
      addVideoFrameStream(string, string, string, msRest.HttpRequestBody,
      string, ReviewsAddVideoFrameStreamOptionalParams, ServiceCallback<void>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.addVideoFrameStream_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoFrameStream(contentType: string, teamName: string,
        reviewId: string, frameImageZip: msRest.HttpRequestBody, frameMetadata:
        string, options: ReviewsAddVideoFrameStreamOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: frameImageZip
          type: <xref uid="msRest.HttpRequestBody" />
          description: Zip file containing frame images.
        - id: frameMetadata
          type: string
          description: Metadata of the frame.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ReviewsAddVideoFrameStreamOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      addVideoFrameStream(string, string, string, msRest.HttpRequestBody,
      string, ServiceCallback<void>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.addVideoFrameStream_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoFrameStream(contentType: string, teamName: string,
        reviewId: string, frameImageZip: msRest.HttpRequestBody, frameMetadata:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: frameImageZip
          type: <xref uid="msRest.HttpRequestBody" />
          description: Zip file containing frame images.
        - id: frameMetadata
          type: string
          description: Metadata of the frame.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      addVideoFrameUrl(string, string, string, VideoFrameBodyItem[],
      Models.ReviewsAddVideoFrameUrlOptionalParams)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.addVideoFrameUrl'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      Use this method to add frames for a video review.Timescale: This parameter
      is a factor which is

      used to convert the timestamp on a frame into milliseconds. Timescale is
      provided in the output

      of the Content Moderator video media processor on the Azure Media Services
      platform.Timescale in

      the Video Moderation output is Ticks/Second.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoFrameUrl(contentType: string, teamName: string,
        reviewId: string, videoFrameBody: VideoFrameBodyItem[], options?:
        Models.ReviewsAddVideoFrameUrlOptionalParams)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: videoFrameBody
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.VideoFrameBodyItem"
            />[]
          description: Body for add video frames API
        - id: options
          type: <xref uid="Models.ReviewsAddVideoFrameUrlOptionalParams" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: >-
      addVideoFrameUrl(string, string, string, VideoFrameBodyItem[],
      ReviewsAddVideoFrameUrlOptionalParams, ServiceCallback<void>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.addVideoFrameUrl_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoFrameUrl(contentType: string, teamName: string,
        reviewId: string, videoFrameBody: VideoFrameBodyItem[], options:
        ReviewsAddVideoFrameUrlOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: videoFrameBody
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.VideoFrameBodyItem"
            />[]
          description: Body for add video frames API
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ReviewsAddVideoFrameUrlOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      addVideoFrameUrl(string, string, string, VideoFrameBodyItem[],
      ServiceCallback<void>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.addVideoFrameUrl_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoFrameUrl(contentType: string, teamName: string,
        reviewId: string, videoFrameBody: VideoFrameBodyItem[], callback:
        ServiceCallback<void>)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: videoFrameBody
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.VideoFrameBodyItem"
            />[]
          description: Body for add video frames API
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      addVideoTranscript(string, string, msRest.HttpRequestBody,
      msRest.RequestOptionsBase)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.addVideoTranscript'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      This API adds a transcript file (text version of all the words spoken in a
      video) to a video

      review. The file should be a valid WebVTT format.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoTranscript(teamName: string, reviewId: string, vTTfile:
        msRest.HttpRequestBody, options?: msRest.RequestOptionsBase)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: vTTfile
          type: <xref uid="msRest.HttpRequestBody" />
          description: Transcript file of the video.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: >-
      addVideoTranscript(string, string, msRest.HttpRequestBody,
      RequestOptionsBase, ServiceCallback<void>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.addVideoTranscript_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoTranscript(teamName: string, reviewId: string, vTTfile:
        msRest.HttpRequestBody, options: RequestOptionsBase, callback:
        ServiceCallback<void>)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: vTTfile
          type: <xref uid="msRest.HttpRequestBody" />
          description: Transcript file of the video.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      addVideoTranscript(string, string, msRest.HttpRequestBody,
      ServiceCallback<void>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.addVideoTranscript_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoTranscript(teamName: string, reviewId: string, vTTfile:
        msRest.HttpRequestBody, callback: ServiceCallback<void>)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: vTTfile
          type: <xref uid="msRest.HttpRequestBody" />
          description: Transcript file of the video.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      addVideoTranscriptModerationResult(string, string, string,
      TranscriptModerationBodyItem[], msRest.RequestOptionsBase)
    uid: >-
      @azure/cognitiveservices-contentmoderator.Reviews.addVideoTranscriptModerationResult
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      This API adds a transcript screen text result file for a video review.
      Transcript screen text

      result file is a result of Screen Text API . In order to generate
      transcript screen text result

      file , a transcript file has to be screened for profanity using Screen
      Text API.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoTranscriptModerationResult(contentType: string,
        teamName: string, reviewId: string, transcriptModerationBody:
        TranscriptModerationBodyItem[], options?: msRest.RequestOptionsBase)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: transcriptModerationBody
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.TranscriptModerationBodyItem"
            />[]
          description: Body for add video transcript moderation result API
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: >-
      addVideoTranscriptModerationResult(string, string, string,
      TranscriptModerationBodyItem[], RequestOptionsBase, ServiceCallback<void>)
    uid: >-
      @azure/cognitiveservices-contentmoderator.Reviews.addVideoTranscriptModerationResult_2
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoTranscriptModerationResult(contentType: string,
        teamName: string, reviewId: string, transcriptModerationBody:
        TranscriptModerationBodyItem[], options: RequestOptionsBase, callback:
        ServiceCallback<void>)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: transcriptModerationBody
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.TranscriptModerationBodyItem"
            />[]
          description: Body for add video transcript moderation result API
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      addVideoTranscriptModerationResult(string, string, string,
      TranscriptModerationBodyItem[], ServiceCallback<void>)
    uid: >-
      @azure/cognitiveservices-contentmoderator.Reviews.addVideoTranscriptModerationResult_1
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addVideoTranscriptModerationResult(contentType: string,
        teamName: string, reviewId: string, transcriptModerationBody:
        TranscriptModerationBodyItem[], callback: ServiceCallback<void>)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: transcriptModerationBody
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.TranscriptModerationBodyItem"
            />[]
          description: Body for add video transcript moderation result API
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      createJob(string, Models.ContentType, string, string,
      Models.JobContentType, Content, Models.ReviewsCreateJobOptionalParams)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.createJob'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      A job Id will be returned for the content posted on this endpoint.

      Once the content is evaluated against the Workflow provided the review
      will be created or

      ignored based on the workflow expression.


      <h3>CallBack Schemas </h3>


      <p>

      <h4>Job Completion CallBack Sample</h4><br/>


      {<br/>

      "JobId": "<Job Id>,<br/>

      "ReviewId": "<Review Id, if the Job resulted in a Review to be
      created>",<br/>

      "WorkFlowId": "default",<br/>

      "Status": "<This will be one of Complete, InProgress, Error>",<br/>

      "ContentType": "Image",<br/>

      "ContentId": "<This is the ContentId that was specified on input>",<br/>

      "CallBackType": "Job",<br/>

      "Metadata": {<br/>

      "adultscore": "0.xxx",<br/>

      "a": "False",<br/>

      "racyscore": "0.xxx",<br/>

      "r": "True"<br/>

      }<br/>

      }<br/>


      </p>

      <p>

      <h4>Review Completion CallBack Sample</h4><br/>


      {

      "ReviewId": "<Review Id>",<br/>

      "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>

      "ModifiedBy": "<Name of the Reviewer>",<br/>

      "CallBackType": "Review",<br/>

      "ContentId": "<The ContentId that was specified input>",<br/>

      "Metadata": {<br/>

      "adultscore": "0.xxx",

      "a": "False",<br/>

      "racyscore": "0.xxx",<br/>

      "r": "True"<br/>

      },<br/>

      "ReviewerResultTags": {<br/>

      "a": "False",<br/>

      "r": "True"<br/>

      }<br/>

      }<br/>


      </p>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createJob(teamName: string, contentType: Models.ContentType,
        contentId: string, workflowName: string, jobContentType:
        Models.JobContentType, content: Content, options?:
        Models.ReviewsCreateJobOptionalParams)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: contentType
          type: <xref uid="Models.ContentType" />
          description: >-
            Image, Text or Video. Possible values include: 'Image', 'Text',
            'Video'
        - id: contentId
          type: string
          description: Id/Name to identify the content submitted.
        - id: workflowName
          type: string
          description: Workflow Name that you want to invoke.
        - id: jobContentType
          type: <xref uid="Models.JobContentType" />
          description: |-
            The content type. Possible values include: 'application/json',
            'image/jpeg'
        - id: content
          type: <xref uid="@azure/cognitiveservices-contentmoderator.Content" />
          description: Content to evaluate.
        - id: options
          type: <xref uid="Models.ReviewsCreateJobOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.ReviewsCreateJobResponse" />&gt;
        description: Promise<Models.ReviewsCreateJobResponse>
  - name: >-
      createJob(string, Models.ContentType, string, string,
      Models.JobContentType, Content, ReviewsCreateJobOptionalParams,
      ServiceCallback<JobId>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.createJob_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createJob(teamName: string, contentType: Models.ContentType,
        contentId: string, workflowName: string, jobContentType:
        Models.JobContentType, content: Content, options:
        ReviewsCreateJobOptionalParams, callback: ServiceCallback<JobId>)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: contentType
          type: <xref uid="Models.ContentType" />
          description: >-
            Image, Text or Video. Possible values include: 'Image', 'Text',
            'Video'
        - id: contentId
          type: string
          description: Id/Name to identify the content submitted.
        - id: workflowName
          type: string
          description: Workflow Name that you want to invoke.
        - id: jobContentType
          type: <xref uid="Models.JobContentType" />
          description: |-
            The content type. Possible values include: 'application/json',
            'image/jpeg'
        - id: content
          type: <xref uid="@azure/cognitiveservices-contentmoderator.Content" />
          description: Content to evaluate.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ReviewsCreateJobOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.JobId" />&gt;
          description: |
            The callback
  - name: >-
      createJob(string, Models.ContentType, string, string,
      Models.JobContentType, Content, ServiceCallback<JobId>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.createJob_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createJob(teamName: string, contentType: Models.ContentType,
        contentId: string, workflowName: string, jobContentType:
        Models.JobContentType, content: Content, callback:
        ServiceCallback<JobId>)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: contentType
          type: <xref uid="Models.ContentType" />
          description: >-
            Image, Text or Video. Possible values include: 'Image', 'Text',
            'Video'
        - id: contentId
          type: string
          description: Id/Name to identify the content submitted.
        - id: workflowName
          type: string
          description: Workflow Name that you want to invoke.
        - id: jobContentType
          type: <xref uid="Models.JobContentType" />
          description: |-
            The content type. Possible values include: 'application/json',
            'image/jpeg'
        - id: content
          type: <xref uid="@azure/cognitiveservices-contentmoderator.Content" />
          description: Content to evaluate.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.JobId" />&gt;
          description: |
            The callback
  - name: >-
      createReviews(string, string, CreateReviewBodyItem[],
      Models.ReviewsCreateReviewsOptionalParams)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.createReviews'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      The reviews created would show up for Reviewers on your team. As Reviewers
      complete reviewing,

      results of the Review would be POSTED (i.e. HTTP POST) on the specified
      CallBackEndpoint.

      <h3>CallBack Schemas </h3>

      <h4>Review Completion CallBack Sample</h4>

      <p>

      {<br/>

      "ReviewId": "<Review Id>",<br/>

      "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>

      "ModifiedBy": "<Name of the Reviewer>",<br/>

      "CallBackType": "Review",<br/>

      "ContentId": "<The ContentId that was specified input>",<br/>

      "Metadata": {<br/>

      "adultscore": "0.xxx",<br/>

      "a": "False",<br/>

      "racyscore": "0.xxx",<br/>

      "r": "True"<br/>

      },<br/>

      "ReviewerResultTags": {<br/>

      "a": "False",<br/>

      "r": "True"<br/>

      }<br/>

      }<br/>


      </p>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createReviews(urlContentType: string, teamName: string,
        createReviewBody: CreateReviewBodyItem[], options?:
        Models.ReviewsCreateReviewsOptionalParams)
      parameters:
        - id: urlContentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: createReviewBody
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.CreateReviewBodyItem"
            />[]
          description: Body for create reviews API
        - id: options
          type: <xref uid="Models.ReviewsCreateReviewsOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.ReviewsCreateReviewsResponse" />&gt;
        description: Promise<Models.ReviewsCreateReviewsResponse>
  - name: >-
      createReviews(string, string, CreateReviewBodyItem[],
      ReviewsCreateReviewsOptionalParams, ServiceCallback<string[]>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.createReviews_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createReviews(urlContentType: string, teamName: string,
        createReviewBody: CreateReviewBodyItem[], options:
        ReviewsCreateReviewsOptionalParams, callback: ServiceCallback<string[]>)
      parameters:
        - id: urlContentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: createReviewBody
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.CreateReviewBodyItem"
            />[]
          description: Body for create reviews API
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ReviewsCreateReviewsOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: 'ServiceCallback&lt;string[]&gt;'
          description: |
            The callback
  - name: >-
      createReviews(string, string, CreateReviewBodyItem[],
      ServiceCallback<string[]>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.createReviews_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createReviews(urlContentType: string, teamName: string,
        createReviewBody: CreateReviewBodyItem[], callback:
        ServiceCallback<string[]>)
      parameters:
        - id: urlContentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: createReviewBody
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.CreateReviewBodyItem"
            />[]
          description: Body for create reviews API
        - id: callback
          type: 'ServiceCallback&lt;string[]&gt;'
          description: |
            The callback
  - name: >-
      createVideoReviews(string, string, CreateVideoReviewsBodyItem[],
      Models.ReviewsCreateVideoReviewsOptionalParams)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.createVideoReviews'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      The reviews created would show up for Reviewers on your team. As Reviewers
      complete reviewing,

      results of the Review would be POSTED (i.e. HTTP POST) on the specified
      CallBackEndpoint.

      <h3>CallBack Schemas </h3>

      <h4>Review Completion CallBack Sample</h4>

      <p>

      {<br/>

      "ReviewId": "<Review Id>",<br/>

      "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>

      "ModifiedBy": "<Name of the Reviewer>",<br/>

      "CallBackType": "Review",<br/>

      "ContentId": "<The ContentId that was specified input>",<br/>

      "Metadata": {<br/>

      "adultscore": "0.xxx",<br/>

      "a": "False",<br/>

      "racyscore": "0.xxx",<br/>

      "r": "True"<br/>

      },<br/>

      "ReviewerResultTags": {<br/>

      "a": "False",<br/>

      "r": "True"<br/>

      }<br/>

      }<br/>


      </p>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createVideoReviews(contentType: string, teamName: string,
        createVideoReviewsBody: CreateVideoReviewsBodyItem[], options?:
        Models.ReviewsCreateVideoReviewsOptionalParams)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: createVideoReviewsBody
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.CreateVideoReviewsBodyItem"
            />[]
          description: Body for create reviews API
        - id: options
          type: <xref uid="Models.ReviewsCreateVideoReviewsOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.ReviewsCreateVideoReviewsResponse" />&gt;
        description: Promise<Models.ReviewsCreateVideoReviewsResponse>
  - name: >-
      createVideoReviews(string, string, CreateVideoReviewsBodyItem[],
      ReviewsCreateVideoReviewsOptionalParams, ServiceCallback<string[]>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.createVideoReviews_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createVideoReviews(contentType: string, teamName: string,
        createVideoReviewsBody: CreateVideoReviewsBodyItem[], options:
        ReviewsCreateVideoReviewsOptionalParams, callback:
        ServiceCallback<string[]>)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: createVideoReviewsBody
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.CreateVideoReviewsBodyItem"
            />[]
          description: Body for create reviews API
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ReviewsCreateVideoReviewsOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: 'ServiceCallback&lt;string[]&gt;'
          description: |
            The callback
  - name: >-
      createVideoReviews(string, string, CreateVideoReviewsBodyItem[],
      ServiceCallback<string[]>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.createVideoReviews_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createVideoReviews(contentType: string, teamName: string,
        createVideoReviewsBody: CreateVideoReviewsBodyItem[], callback:
        ServiceCallback<string[]>)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: teamName
          type: string
          description: Your team name.
        - id: createVideoReviewsBody
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.CreateVideoReviewsBodyItem"
            />[]
          description: Body for create reviews API
        - id: callback
          type: 'ServiceCallback&lt;string[]&gt;'
          description: |
            The callback
  - name: 'getJobDetails(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.getJobDetails'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: Get the Job Details for a Job Id.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getJobDetails(teamName: string, jobId: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: teamName
          type: string
          description: Your Team Name.
        - id: jobId
          type: string
          description: Id of the job.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.ReviewsGetJobDetailsResponse" />&gt;
        description: Promise<Models.ReviewsGetJobDetailsResponse>
  - name: 'getJobDetails(string, string, RequestOptionsBase, ServiceCallback<Job>)'
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.getJobDetails_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getJobDetails(teamName: string, jobId: string, options:
        RequestOptionsBase, callback: ServiceCallback<Job>)
      parameters:
        - id: teamName
          type: string
          description: Your Team Name.
        - id: jobId
          type: string
          description: Id of the job.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.Job" />&gt;
          description: |
            The callback
  - name: 'getJobDetails(string, string, ServiceCallback<Job>)'
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.getJobDetails_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getJobDetails(teamName: string, jobId: string, callback:
        ServiceCallback<Job>)
      parameters:
        - id: teamName
          type: string
          description: Your Team Name.
        - id: jobId
          type: string
          description: Id of the job.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.Job" />&gt;
          description: |
            The callback
  - name: 'getReview(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.getReview'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: Returns review details for the review Id passed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getReview(teamName: string, reviewId: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: teamName
          type: string
          description: Your Team Name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.ReviewsGetReviewResponse" />&gt;
        description: Promise<Models.ReviewsGetReviewResponse>
  - name: 'getReview(string, string, RequestOptionsBase, ServiceCallback<Review>)'
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.getReview_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getReview(teamName: string, reviewId: string, options:
        RequestOptionsBase, callback: ServiceCallback<Review>)
      parameters:
        - id: teamName
          type: string
          description: Your Team Name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.Review" />&gt;
          description: |
            The callback
  - name: 'getReview(string, string, ServiceCallback<Review>)'
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.getReview_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getReview(teamName: string, reviewId: string, callback:
        ServiceCallback<Review>)
      parameters:
        - id: teamName
          type: string
          description: Your Team Name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.Review" />&gt;
          description: |
            The callback
  - name: 'getVideoFrames(string, string, Models.ReviewsGetVideoFramesOptionalParams)'
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.getVideoFrames'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      The reviews created would show up for Reviewers on your team. As Reviewers
      complete reviewing,

      results of the Review would be POSTED (i.e. HTTP POST) on the specified
      CallBackEndpoint.

      <h3>CallBack Schemas </h3>

      <h4>Review Completion CallBack Sample</h4>

      <p>

      {<br/>

      "ReviewId": "<Review Id>",<br/>

      "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>

      "ModifiedBy": "<Name of the Reviewer>",<br/>

      "CallBackType": "Review",<br/>

      "ContentId": "<The ContentId that was specified input>",<br/>

      "Metadata": {<br/>

      "adultscore": "0.xxx",<br/>

      "a": "False",<br/>

      "racyscore": "0.xxx",<br/>

      "r": "True"<br/>

      },<br/>

      "ReviewerResultTags": {<br/>

      "a": "False",<br/>

      "r": "True"<br/>

      }<br/>

      }<br/>


      </p>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getVideoFrames(teamName: string, reviewId: string, options?:
        Models.ReviewsGetVideoFramesOptionalParams)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: options
          type: <xref uid="Models.ReviewsGetVideoFramesOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.ReviewsGetVideoFramesResponse" />&gt;
        description: Promise<Models.ReviewsGetVideoFramesResponse>
  - name: >-
      getVideoFrames(string, string, ReviewsGetVideoFramesOptionalParams,
      ServiceCallback<Frames>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.getVideoFrames_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getVideoFrames(teamName: string, reviewId: string, options:
        ReviewsGetVideoFramesOptionalParams, callback: ServiceCallback<Frames>)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ReviewsGetVideoFramesOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.Frames" />&gt;
          description: |
            The callback
  - name: 'getVideoFrames(string, string, ServiceCallback<Frames>)'
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.getVideoFrames_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getVideoFrames(teamName: string, reviewId: string, callback:
        ServiceCallback<Frames>)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.Frames" />&gt;
          description: |
            The callback
  - name: 'publishVideoReview(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.publishVideoReview'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: Publish video review to make it available for review.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function publishVideoReview(teamName: string, reviewId: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: >-
      publishVideoReview(string, string, RequestOptionsBase,
      ServiceCallback<void>)
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.publishVideoReview_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function publishVideoReview(teamName: string, reviewId: string, options:
        RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'publishVideoReview(string, string, ServiceCallback<void>)'
    uid: '@azure/cognitiveservices-contentmoderator.Reviews.publishVideoReview_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function publishVideoReview(teamName: string, reviewId: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: teamName
          type: string
          description: Your team name.
        - id: reviewId
          type: string
          description: Id of the review.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
