### YamlMime:TSType
name: ImageModeration
uid: '@azure/cognitiveservices-contentmoderator.ImageModeration'
package: '@azure/cognitiveservices-contentmoderator'
summary: Class representing a ImageModeration.
fullName: ImageModeration
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: ImageModeration(ContentModeratorClientContext)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.constructor'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: Create a ImageModeration.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new ImageModeration(client: ContentModeratorClientContext)'
      parameters:
        - id: client
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ContentModeratorClientContext"
            />
          description: |
            Reference to the service client.
methods:
  - name: >-
      evaluateFileInput(msRest.HttpRequestBody,
      ImageModerationEvaluateFileInputOptionalParams, ServiceCallback<Evaluate>)
    uid: >-
      @azure/cognitiveservices-contentmoderator.ImageModeration.evaluateFileInput_2
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function evaluateFileInput(imageStream: msRest.HttpRequestBody, options:
        ImageModerationEvaluateFileInputOptionalParams, callback:
        ServiceCallback<Evaluate>)
      parameters:
        - id: imageStream
          type: <xref uid="msRest.HttpRequestBody" />
          description: The image file.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ImageModerationEvaluateFileInputOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.Evaluate" />&gt;
          description: |
            The callback
  - name: >-
      evaluateFileInput(msRest.HttpRequestBody,
      Models.ImageModerationEvaluateFileInputOptionalParams)
    uid: >-
      @azure/cognitiveservices-contentmoderator.ImageModeration.evaluateFileInput
    package: '@azure/cognitiveservices-contentmoderator'
    summary: Returns probabilities of the image containing racy or adult content.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function evaluateFileInput(imageStream: msRest.HttpRequestBody,
        options?: Models.ImageModerationEvaluateFileInputOptionalParams)
      parameters:
        - id: imageStream
          type: <xref uid="msRest.HttpRequestBody" />
          description: The image file.
        - id: options
          type: <xref uid="Models.ImageModerationEvaluateFileInputOptionalParams" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.ImageModerationEvaluateFileInputResponse"
          />&gt;
        description: Promise<Models.ImageModerationEvaluateFileInputResponse>
  - name: 'evaluateFileInput(msRest.HttpRequestBody, ServiceCallback<Evaluate>)'
    uid: >-
      @azure/cognitiveservices-contentmoderator.ImageModeration.evaluateFileInput_1
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function evaluateFileInput(imageStream: msRest.HttpRequestBody,
        callback: ServiceCallback<Evaluate>)
      parameters:
        - id: imageStream
          type: <xref uid="msRest.HttpRequestBody" />
          description: The image file.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.Evaluate" />&gt;
          description: |
            The callback
  - name: >-
      evaluateMethod(ImageModerationEvaluateMethodOptionalParams,
      ServiceCallback<Evaluate>)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.evaluateMethod_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function evaluateMethod(options:
        ImageModerationEvaluateMethodOptionalParams, callback:
        ServiceCallback<Evaluate>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ImageModerationEvaluateMethodOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.Evaluate" />&gt;
          description: |
            The callback
  - name: evaluateMethod(Models.ImageModerationEvaluateMethodOptionalParams)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.evaluateMethod'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: Returns probabilities of the image containing racy or adult content.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function evaluateMethod(options?:
        Models.ImageModerationEvaluateMethodOptionalParams)
      parameters:
        - id: options
          type: <xref uid="Models.ImageModerationEvaluateMethodOptionalParams" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.ImageModerationEvaluateMethodResponse"
          />&gt;
        description: Promise<Models.ImageModerationEvaluateMethodResponse>
  - name: evaluateMethod(ServiceCallback<Evaluate>)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.evaluateMethod_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function evaluateMethod(callback: ServiceCallback<Evaluate>)'
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.Evaluate" />&gt;
          description: |
            The callback
  - name: >-
      evaluateUrlInput(string, ImageUrl,
      ImageModerationEvaluateUrlInputOptionalParams, ServiceCallback<Evaluate>)
    uid: >-
      @azure/cognitiveservices-contentmoderator.ImageModeration.evaluateUrlInput_2
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function evaluateUrlInput(contentType: string, imageUrl: ImageUrl,
        options: ImageModerationEvaluateUrlInputOptionalParams, callback:
        ServiceCallback<Evaluate>)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: imageUrl
          type: <xref uid="@azure/cognitiveservices-contentmoderator.ImageUrl" />
          description: The image url.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ImageModerationEvaluateUrlInputOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.Evaluate" />&gt;
          description: |
            The callback
  - name: >-
      evaluateUrlInput(string, ImageUrl,
      Models.ImageModerationEvaluateUrlInputOptionalParams)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.evaluateUrlInput'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: Returns probabilities of the image containing racy or adult content.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function evaluateUrlInput(contentType: string, imageUrl: ImageUrl,
        options?: Models.ImageModerationEvaluateUrlInputOptionalParams)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: imageUrl
          type: <xref uid="@azure/cognitiveservices-contentmoderator.ImageUrl" />
          description: The image url.
        - id: options
          type: <xref uid="Models.ImageModerationEvaluateUrlInputOptionalParams" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.ImageModerationEvaluateUrlInputResponse"
          />&gt;
        description: Promise<Models.ImageModerationEvaluateUrlInputResponse>
  - name: 'evaluateUrlInput(string, ImageUrl, ServiceCallback<Evaluate>)'
    uid: >-
      @azure/cognitiveservices-contentmoderator.ImageModeration.evaluateUrlInput_1
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function evaluateUrlInput(contentType: string, imageUrl: ImageUrl,
        callback: ServiceCallback<Evaluate>)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: imageUrl
          type: <xref uid="@azure/cognitiveservices-contentmoderator.ImageUrl" />
          description: The image url.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.Evaluate" />&gt;
          description: |
            The callback
  - name: >-
      findFaces(ImageModerationFindFacesOptionalParams,
      ServiceCallback<FoundFaces>)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.findFaces_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function findFaces(options: ImageModerationFindFacesOptionalParams,
        callback: ServiceCallback<FoundFaces>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ImageModerationFindFacesOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.FoundFaces" />&gt;
          description: |
            The callback
  - name: findFaces(Models.ImageModerationFindFacesOptionalParams)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.findFaces'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: Returns the list of faces found.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function findFaces(options?:
        Models.ImageModerationFindFacesOptionalParams)
      parameters:
        - id: options
          type: <xref uid="Models.ImageModerationFindFacesOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.ImageModerationFindFacesResponse" />&gt;
        description: Promise<Models.ImageModerationFindFacesResponse>
  - name: findFaces(ServiceCallback<FoundFaces>)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.findFaces_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function findFaces(callback: ServiceCallback<FoundFaces>)'
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.FoundFaces" />&gt;
          description: |
            The callback
  - name: >-
      findFacesFileInput(msRest.HttpRequestBody,
      ImageModerationFindFacesFileInputOptionalParams,
      ServiceCallback<FoundFaces>)
    uid: >-
      @azure/cognitiveservices-contentmoderator.ImageModeration.findFacesFileInput_2
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function findFacesFileInput(imageStream: msRest.HttpRequestBody,
        options: ImageModerationFindFacesFileInputOptionalParams, callback:
        ServiceCallback<FoundFaces>)
      parameters:
        - id: imageStream
          type: <xref uid="msRest.HttpRequestBody" />
          description: The image file.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ImageModerationFindFacesFileInputOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.FoundFaces" />&gt;
          description: |
            The callback
  - name: >-
      findFacesFileInput(msRest.HttpRequestBody,
      Models.ImageModerationFindFacesFileInputOptionalParams)
    uid: >-
      @azure/cognitiveservices-contentmoderator.ImageModeration.findFacesFileInput
    package: '@azure/cognitiveservices-contentmoderator'
    summary: Returns the list of faces found.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function findFacesFileInput(imageStream: msRest.HttpRequestBody,
        options?: Models.ImageModerationFindFacesFileInputOptionalParams)
      parameters:
        - id: imageStream
          type: <xref uid="msRest.HttpRequestBody" />
          description: The image file.
        - id: options
          type: >-
            <xref uid="Models.ImageModerationFindFacesFileInputOptionalParams"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.ImageModerationFindFacesFileInputResponse" />&gt;
        description: Promise<Models.ImageModerationFindFacesFileInputResponse>
  - name: 'findFacesFileInput(msRest.HttpRequestBody, ServiceCallback<FoundFaces>)'
    uid: >-
      @azure/cognitiveservices-contentmoderator.ImageModeration.findFacesFileInput_1
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function findFacesFileInput(imageStream: msRest.HttpRequestBody,
        callback: ServiceCallback<FoundFaces>)
      parameters:
        - id: imageStream
          type: <xref uid="msRest.HttpRequestBody" />
          description: The image file.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.FoundFaces" />&gt;
          description: |
            The callback
  - name: >-
      findFacesUrlInput(string, ImageUrl,
      ImageModerationFindFacesUrlInputOptionalParams,
      ServiceCallback<FoundFaces>)
    uid: >-
      @azure/cognitiveservices-contentmoderator.ImageModeration.findFacesUrlInput_2
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function findFacesUrlInput(contentType: string, imageUrl: ImageUrl,
        options: ImageModerationFindFacesUrlInputOptionalParams, callback:
        ServiceCallback<FoundFaces>)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: imageUrl
          type: <xref uid="@azure/cognitiveservices-contentmoderator.ImageUrl" />
          description: The image url.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ImageModerationFindFacesUrlInputOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.FoundFaces" />&gt;
          description: |
            The callback
  - name: >-
      findFacesUrlInput(string, ImageUrl,
      Models.ImageModerationFindFacesUrlInputOptionalParams)
    uid: >-
      @azure/cognitiveservices-contentmoderator.ImageModeration.findFacesUrlInput
    package: '@azure/cognitiveservices-contentmoderator'
    summary: Returns the list of faces found.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function findFacesUrlInput(contentType: string, imageUrl: ImageUrl,
        options?: Models.ImageModerationFindFacesUrlInputOptionalParams)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: imageUrl
          type: <xref uid="@azure/cognitiveservices-contentmoderator.ImageUrl" />
          description: The image url.
        - id: options
          type: <xref uid="Models.ImageModerationFindFacesUrlInputOptionalParams" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.ImageModerationFindFacesUrlInputResponse"
          />&gt;
        description: Promise<Models.ImageModerationFindFacesUrlInputResponse>
  - name: 'findFacesUrlInput(string, ImageUrl, ServiceCallback<FoundFaces>)'
    uid: >-
      @azure/cognitiveservices-contentmoderator.ImageModeration.findFacesUrlInput_1
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function findFacesUrlInput(contentType: string, imageUrl: ImageUrl,
        callback: ServiceCallback<FoundFaces>)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: imageUrl
          type: <xref uid="@azure/cognitiveservices-contentmoderator.ImageUrl" />
          description: The image url.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.FoundFaces" />&gt;
          description: |
            The callback
  - name: >-
      matchFileInput(msRest.HttpRequestBody,
      ImageModerationMatchFileInputOptionalParams,
      ServiceCallback<MatchResponse>)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.matchFileInput_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function matchFileInput(imageStream: msRest.HttpRequestBody, options:
        ImageModerationMatchFileInputOptionalParams, callback:
        ServiceCallback<MatchResponse>)
      parameters:
        - id: imageStream
          type: <xref uid="msRest.HttpRequestBody" />
          description: The image file.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ImageModerationMatchFileInputOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.MatchResponse" />&gt;
          description: |
            The callback
  - name: >-
      matchFileInput(msRest.HttpRequestBody,
      Models.ImageModerationMatchFileInputOptionalParams)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.matchFileInput'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      Fuzzily match an image against one of your custom Image Lists. You can
      create and manage your

      custom image lists using <a

      href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
      API.

      Returns ID and tags of matching image.<br/>

      <br/>

      Note: Refresh Index must be run on the corresponding Image List before
      additions and removals

      are reflected in the response.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function matchFileInput(imageStream: msRest.HttpRequestBody, options?:
        Models.ImageModerationMatchFileInputOptionalParams)
      parameters:
        - id: imageStream
          type: <xref uid="msRest.HttpRequestBody" />
          description: The image file.
        - id: options
          type: <xref uid="Models.ImageModerationMatchFileInputOptionalParams" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.ImageModerationMatchFileInputResponse"
          />&gt;
        description: Promise<Models.ImageModerationMatchFileInputResponse>
  - name: 'matchFileInput(msRest.HttpRequestBody, ServiceCallback<MatchResponse>)'
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.matchFileInput_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function matchFileInput(imageStream: msRest.HttpRequestBody, callback:
        ServiceCallback<MatchResponse>)
      parameters:
        - id: imageStream
          type: <xref uid="msRest.HttpRequestBody" />
          description: The image file.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.MatchResponse" />&gt;
          description: |
            The callback
  - name: >-
      matchMethod(ImageModerationMatchMethodOptionalParams,
      ServiceCallback<MatchResponse>)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.matchMethod_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function matchMethod(options: ImageModerationMatchMethodOptionalParams,
        callback: ServiceCallback<MatchResponse>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ImageModerationMatchMethodOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.MatchResponse" />&gt;
          description: |
            The callback
  - name: matchMethod(Models.ImageModerationMatchMethodOptionalParams)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.matchMethod'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      Fuzzily match an image against one of your custom Image Lists. You can
      create and manage your

      custom image lists using <a

      href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
      API.

      Returns ID and tags of matching image.<br/>

      <br/>

      Note: Refresh Index must be run on the corresponding Image List before
      additions and removals

      are reflected in the response.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function matchMethod(options?:
        Models.ImageModerationMatchMethodOptionalParams)
      parameters:
        - id: options
          type: <xref uid="Models.ImageModerationMatchMethodOptionalParams" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.ImageModerationMatchMethodResponse"
          />&gt;
        description: Promise<Models.ImageModerationMatchMethodResponse>
  - name: matchMethod(ServiceCallback<MatchResponse>)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.matchMethod_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function matchMethod(callback: ServiceCallback<MatchResponse>)'
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.MatchResponse" />&gt;
          description: |
            The callback
  - name: >-
      matchUrlInput(string, ImageUrl,
      ImageModerationMatchUrlInputOptionalParams,
      ServiceCallback<MatchResponse>)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.matchUrlInput_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function matchUrlInput(contentType: string, imageUrl: ImageUrl, options:
        ImageModerationMatchUrlInputOptionalParams, callback:
        ServiceCallback<MatchResponse>)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: imageUrl
          type: <xref uid="@azure/cognitiveservices-contentmoderator.ImageUrl" />
          description: The image url.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ImageModerationMatchUrlInputOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.MatchResponse" />&gt;
          description: |
            The callback
  - name: >-
      matchUrlInput(string, ImageUrl,
      Models.ImageModerationMatchUrlInputOptionalParams)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.matchUrlInput'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      Fuzzily match an image against one of your custom Image Lists. You can
      create and manage your

      custom image lists using <a

      href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
      API.

      Returns ID and tags of matching image.<br/>

      <br/>

      Note: Refresh Index must be run on the corresponding Image List before
      additions and removals

      are reflected in the response.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function matchUrlInput(contentType: string, imageUrl: ImageUrl,
        options?: Models.ImageModerationMatchUrlInputOptionalParams)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: imageUrl
          type: <xref uid="@azure/cognitiveservices-contentmoderator.ImageUrl" />
          description: The image url.
        - id: options
          type: <xref uid="Models.ImageModerationMatchUrlInputOptionalParams" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.ImageModerationMatchUrlInputResponse"
          />&gt;
        description: Promise<Models.ImageModerationMatchUrlInputResponse>
  - name: 'matchUrlInput(string, ImageUrl, ServiceCallback<MatchResponse>)'
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.matchUrlInput_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function matchUrlInput(contentType: string, imageUrl: ImageUrl,
        callback: ServiceCallback<MatchResponse>)
      parameters:
        - id: contentType
          type: string
          description: The content type.
        - id: imageUrl
          type: <xref uid="@azure/cognitiveservices-contentmoderator.ImageUrl" />
          description: The image url.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.MatchResponse" />&gt;
          description: |
            The callback
  - name: >-
      oCRFileInput(string, msRest.HttpRequestBody,
      ImageModerationOCRFileInputOptionalParams, ServiceCallback<OCR>)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.oCRFileInput_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function oCRFileInput(language: string, imageStream:
        msRest.HttpRequestBody, options:
        ImageModerationOCRFileInputOptionalParams, callback:
        ServiceCallback<OCR>)
      parameters:
        - id: language
          type: string
          description: Language of the terms.
        - id: imageStream
          type: <xref uid="msRest.HttpRequestBody" />
          description: The image file.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ImageModerationOCRFileInputOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.OCR" />&gt;
          description: |
            The callback
  - name: >-
      oCRFileInput(string, msRest.HttpRequestBody,
      Models.ImageModerationOCRFileInputOptionalParams)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.oCRFileInput'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      Returns any text found in the image for the language specified. If no
      language is specified in

      input then the detection defaults to English.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function oCRFileInput(language: string, imageStream:
        msRest.HttpRequestBody, options?:
        Models.ImageModerationOCRFileInputOptionalParams)
      parameters:
        - id: language
          type: string
          description: Language of the terms.
        - id: imageStream
          type: <xref uid="msRest.HttpRequestBody" />
          description: The image file.
        - id: options
          type: <xref uid="Models.ImageModerationOCRFileInputOptionalParams" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.ImageModerationOCRFileInputResponse"
          />&gt;
        description: Promise<Models.ImageModerationOCRFileInputResponse>
  - name: 'oCRFileInput(string, msRest.HttpRequestBody, ServiceCallback<OCR>)'
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.oCRFileInput_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function oCRFileInput(language: string, imageStream:
        msRest.HttpRequestBody, callback: ServiceCallback<OCR>)
      parameters:
        - id: language
          type: string
          description: Language of the terms.
        - id: imageStream
          type: <xref uid="msRest.HttpRequestBody" />
          description: The image file.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.OCR" />&gt;
          description: |
            The callback
  - name: >-
      oCRMethod(string, ImageModerationOCRMethodOptionalParams,
      ServiceCallback<OCR>)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.oCRMethod_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function oCRMethod(language: string, options:
        ImageModerationOCRMethodOptionalParams, callback: ServiceCallback<OCR>)
      parameters:
        - id: language
          type: string
          description: Language of the terms.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ImageModerationOCRMethodOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.OCR" />&gt;
          description: |
            The callback
  - name: 'oCRMethod(string, Models.ImageModerationOCRMethodOptionalParams)'
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.oCRMethod'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      Returns any text found in the image for the language specified. If no
      language is specified in

      input then the detection defaults to English.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function oCRMethod(language: string, options?:
        Models.ImageModerationOCRMethodOptionalParams)
      parameters:
        - id: language
          type: string
          description: Language of the terms.
        - id: options
          type: <xref uid="Models.ImageModerationOCRMethodOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.ImageModerationOCRMethodResponse" />&gt;
        description: Promise<Models.ImageModerationOCRMethodResponse>
  - name: 'oCRMethod(string, ServiceCallback<OCR>)'
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.oCRMethod_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function oCRMethod(language: string, callback: ServiceCallback<OCR>)'
      parameters:
        - id: language
          type: string
          description: Language of the terms.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.OCR" />&gt;
          description: |
            The callback
  - name: >-
      oCRUrlInput(string, string, ImageUrl,
      ImageModerationOCRUrlInputOptionalParams, ServiceCallback<OCR>)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.oCRUrlInput_2'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function oCRUrlInput(language: string, contentType: string, imageUrl:
        ImageUrl, options: ImageModerationOCRUrlInputOptionalParams, callback:
        ServiceCallback<OCR>)
      parameters:
        - id: language
          type: string
          description: Language of the terms.
        - id: contentType
          type: string
          description: The content type.
        - id: imageUrl
          type: <xref uid="@azure/cognitiveservices-contentmoderator.ImageUrl" />
          description: The image url.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-contentmoderator.ImageModerationOCRUrlInputOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.OCR" />&gt;
          description: |
            The callback
  - name: >-
      oCRUrlInput(string, string, ImageUrl,
      Models.ImageModerationOCRUrlInputOptionalParams)
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.oCRUrlInput'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: >-
      Returns any text found in the image for the language specified. If no
      language is specified in

      input then the detection defaults to English.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function oCRUrlInput(language: string, contentType: string, imageUrl:
        ImageUrl, options?: Models.ImageModerationOCRUrlInputOptionalParams)
      parameters:
        - id: language
          type: string
          description: Language of the terms.
        - id: contentType
          type: string
          description: The content type.
        - id: imageUrl
          type: <xref uid="@azure/cognitiveservices-contentmoderator.ImageUrl" />
          description: The image url.
        - id: options
          type: <xref uid="Models.ImageModerationOCRUrlInputOptionalParams" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.ImageModerationOCRUrlInputResponse"
          />&gt;
        description: Promise<Models.ImageModerationOCRUrlInputResponse>
  - name: 'oCRUrlInput(string, string, ImageUrl, ServiceCallback<OCR>)'
    uid: '@azure/cognitiveservices-contentmoderator.ImageModeration.oCRUrlInput_1'
    package: '@azure/cognitiveservices-contentmoderator'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function oCRUrlInput(language: string, contentType: string, imageUrl:
        ImageUrl, callback: ServiceCallback<OCR>)
      parameters:
        - id: language
          type: string
          description: Language of the terms.
        - id: contentType
          type: string
          description: The content type.
        - id: imageUrl
          type: <xref uid="@azure/cognitiveservices-contentmoderator.ImageUrl" />
          description: The image url.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-contentmoderator.OCR" />&gt;
          description: |
            The callback
