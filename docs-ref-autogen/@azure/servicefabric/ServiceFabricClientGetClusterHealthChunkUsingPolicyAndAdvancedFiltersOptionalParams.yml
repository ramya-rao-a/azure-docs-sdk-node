### YamlMime:TSType
name: >-
  ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams
uid: >-
  @azure/servicefabric.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams
package: '@azure/servicefabric'
summary: Optional Parameters.
fullName: >-
  ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: abortSignal
    uid: >-
      @azure/servicefabric.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams.abortSignal
    package: '@azure/servicefabric'
    summary: The signal which can be used to abort requests.
    fullName: abortSignal
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'abortSignal?: AbortSignalLike'
      return:
        type: AbortSignalLike
        description: ''
  - name: clusterHealthChunkQueryDescription
    uid: >-
      @azure/servicefabric.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams.clusterHealthChunkQueryDescription
    package: '@azure/servicefabric'
    summary: >-
      Describes the cluster and application health policies used to evaluate the
      cluster health and

      the filters to select which cluster entities to be returned.

      If the cluster health policy is present, it is used to evaluate the
      cluster events and the

      cluster nodes. If not present, the health evaluation uses the cluster
      health policy defined in

      the cluster manifest or the default cluster health policy.

      By default, each application is evaluated using its specific application
      health policy,

      defined in the application manifest, or the default health policy, if no
      policy is defined in

      manifest.

      If the application health policy map is specified, and it has an entry for
      an application, the

      specified application health policy

      is used to evaluate the application health.

      Users can specify very flexible filters to select which cluster entities
      to include in

      response. The selection can be done based on the entities health state and
      based on the

      hierarchy.

      The query can return multi-level children of the entities based on the
      specified filters. For

      example, it can return one application with a specified name, and for this
      application, return

      only services that are in Error or Warning, and all partitions and
      replicas for one of these

      services.
    fullName: clusterHealthChunkQueryDescription
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clusterHealthChunkQueryDescription?: ClusterHealthChunkQueryDescription'
      return:
        type: <xref uid="@azure/servicefabric.ClusterHealthChunkQueryDescription" />
        description: ''
  - name: customHeaders
    uid: >-
      @azure/servicefabric.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams.customHeaders
    package: '@azure/servicefabric'
    summary: |-
      {object} [customHeaders] User defined custom request headers that
      will be applied before the request is sent.
    fullName: customHeaders
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'customHeaders?: undefined | [key: string]: string'
      return:
        type: 'undefined | [key: string]: string'
        description: ''
  - name: onDownloadProgress
    uid: >-
      @azure/servicefabric.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams.onDownloadProgress
    package: '@azure/servicefabric'
    summary: Callback which fires upon download progress.
    fullName: onDownloadProgress
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDownloadProgress?: undefined | (progress: TransferProgressEvent) =>
        void
      return:
        type: 'undefined | (progress: TransferProgressEvent) =&gt; void'
        description: ''
  - name: onUploadProgress
    uid: >-
      @azure/servicefabric.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams.onUploadProgress
    package: '@azure/servicefabric'
    summary: Callback which fires upon upload progress.
    fullName: onUploadProgress
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onUploadProgress?: undefined | (progress: TransferProgressEvent) => void'
      return:
        type: 'undefined | (progress: TransferProgressEvent) =&gt; void'
        description: ''
  - name: timeout
    uid: >-
      @azure/servicefabric.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams.timeout
    package: '@azure/servicefabric'
    summary: >-
      The number of milliseconds a request can take before automatically being
      terminated.
    fullName: timeout
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'timeout?: undefined | number'
      return:
        type: undefined | number
        description: ''
  - name: timeoutParameter
    uid: >-
      @azure/servicefabric.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams.timeoutParameter
    package: '@azure/servicefabric'
    summary: >-
      The server timeout for performing the operation in seconds. This timeout
      specifies the time

      duration that the client is willing to wait for the requested operation to
      complete. The

      default value for this parameter is 60 seconds. Default value: 60.
    fullName: timeoutParameter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'timeoutParameter?: undefined | number'
      return:
        type: undefined | number
        description: ''
extends: RequestOptionsBase
