### YamlMime:TSType
name: MultiInstanceSettings
uid: '@azure/batch.MultiInstanceSettings'
package: '@azure/batch'
summary: >-
  Multi-instance Tasks are commonly used to support MPI Tasks. In the MPI case,
  if any of the

  subtasks fail (for example due to exiting with a non-zero exit code) the
  entire multi-instance

  Task fails. The multi-instance Task is then terminated and retried, up to its
  retry limit.
fullName: MultiInstanceSettings
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: commonResourceFiles
    uid: '@azure/batch.MultiInstanceSettings.commonResourceFiles'
    package: '@azure/batch'
    summary: >-
      A list of files that the Batch service will download before running the
      coordination command

      line. The difference between common resource files and Task resource files
      is that common

      resource files are downloaded for all subtasks including the primary,
      whereas Task resource

      files are downloaded only for the primary. Also note that these resource
      files are not

      downloaded to the Task working directory, but instead are downloaded to
      the Task root

      directory (one directory above the working directory).  There is a maximum
      size for the list

      of resource files.  When the max size is exceeded, the request will fail
      and the response

      error code will be RequestEntityTooLarge. If this occurs, the collection
      of ResourceFiles must

      be reduced in size. This can be achieved using .zip files, Application
      Packages, or Docker

      Containers.
    fullName: commonResourceFiles
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'commonResourceFiles?: ResourceFile[]'
      return:
        type: '<xref uid="@azure/batch.ResourceFile" />[]'
        description: ''
  - name: coordinationCommandLine
    uid: '@azure/batch.MultiInstanceSettings.coordinationCommandLine'
    package: '@azure/batch'
    summary: >-
      The command line to run on all the Compute Nodes to enable them to
      coordinate when the primary

      runs the main Task command. A typical coordination command line launches a
      background service

      and verifies that the service is ready to process inter-node messages.
    fullName: coordinationCommandLine
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'coordinationCommandLine: string'
      return:
        type: string
        description: ''
  - name: numberOfInstances
    uid: '@azure/batch.MultiInstanceSettings.numberOfInstances'
    package: '@azure/batch'
    summary: >-
      The number of Compute Nodes required by the Task. If omitted, the default
      is 1.
    fullName: numberOfInstances
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'numberOfInstances?: undefined | number'
      return:
        type: undefined | number
        description: ''
