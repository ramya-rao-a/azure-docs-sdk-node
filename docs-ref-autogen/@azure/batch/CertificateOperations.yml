### YamlMime:TSType
name: CertificateOperations
uid: '@azure/batch.CertificateOperations'
package: '@azure/batch'
summary: Class representing a CertificateOperations.
fullName: CertificateOperations
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: CertificateOperations(BatchServiceClientContext)
    uid: '@azure/batch.CertificateOperations.constructor'
    package: '@azure/batch'
    summary: Create a CertificateOperations.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new CertificateOperations(client: BatchServiceClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/batch.BatchServiceClientContext" />
          description: |
            Reference to the service client.
methods:
  - name: >-
      add(CertificateAddParameter, CertificateAddOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.CertificateOperations.add_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function add(certificate: CertificateAddParameter, options:
        CertificateAddOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: certificate
          type: <xref uid="@azure/batch.CertificateAddParameter" />
          description: The Certificate to be added.
        - id: options
          type: <xref uid="@azure/batch.CertificateAddOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'add(CertificateAddParameter, Models.CertificateAddOptionalParams)'
    uid: '@azure/batch.CertificateOperations.add'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function add(certificate: CertificateAddParameter, options?:
        Models.CertificateAddOptionalParams)
      parameters:
        - id: certificate
          type: <xref uid="@azure/batch.CertificateAddParameter" />
          description: The Certificate to be added.
        - id: options
          type: <xref uid="Models.CertificateAddOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.CertificateAddResponse" />&gt;
        description: Promise<Models.CertificateAddResponse>
  - name: 'add(CertificateAddParameter, ServiceCallback<void>)'
    uid: '@azure/batch.CertificateOperations.add_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function add(certificate: CertificateAddParameter, callback:
        ServiceCallback<void>)
      parameters:
        - id: certificate
          type: <xref uid="@azure/batch.CertificateAddParameter" />
          description: The Certificate to be added.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      cancelDeletion(string, string, CertificateCancelDeletionOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.CertificateOperations.cancelDeletion_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelDeletion(thumbprintAlgorithm: string, thumbprint: string,
        options: CertificateCancelDeletionOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: thumbprintAlgorithm
          type: string
          description: |-
            The algorithm used to derive the thumbprint parameter. This must be
            sha1.
        - id: thumbprint
          type: string
          description: The thumbprint of the Certificate being deleted.
        - id: options
          type: <xref uid="@azure/batch.CertificateCancelDeletionOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      cancelDeletion(string, string,
      Models.CertificateCancelDeletionOptionalParams)
    uid: '@azure/batch.CertificateOperations.cancelDeletion'
    package: '@azure/batch'
    summary: >-
      If you try to delete a Certificate that is being used by a Pool or Compute
      Node, the status of

      the Certificate changes to deleteFailed. If you decide that you want to
      continue using the

      Certificate, you can use this operation to set the status of the
      Certificate back to active. If

      you intend to delete the Certificate, you do not need to run this
      operation after the deletion

      failed. You must make sure that the Certificate is not being used by any
      resources, and then you

      can try again to delete the Certificate.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelDeletion(thumbprintAlgorithm: string, thumbprint: string,
        options?: Models.CertificateCancelDeletionOptionalParams)
      parameters:
        - id: thumbprintAlgorithm
          type: string
          description: |-
            The algorithm used to derive the thumbprint parameter. This must be
            sha1.
        - id: thumbprint
          type: string
          description: The thumbprint of the Certificate being deleted.
        - id: options
          type: <xref uid="Models.CertificateCancelDeletionOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.CertificateCancelDeletionResponse" />&gt;
        description: Promise<Models.CertificateCancelDeletionResponse>
  - name: 'cancelDeletion(string, string, ServiceCallback<void>)'
    uid: '@azure/batch.CertificateOperations.cancelDeletion_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelDeletion(thumbprintAlgorithm: string, thumbprint: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: thumbprintAlgorithm
          type: string
          description: |-
            The algorithm used to derive the thumbprint parameter. This must be
            sha1.
        - id: thumbprint
          type: string
          description: The thumbprint of the Certificate being deleted.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      deleteMethod(string, string, CertificateDeleteMethodOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.CertificateOperations.deleteMethod_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(thumbprintAlgorithm: string, thumbprint: string,
        options: CertificateDeleteMethodOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: thumbprintAlgorithm
          type: string
          description: |-
            The algorithm used to derive the thumbprint parameter. This must be
            sha1.
        - id: thumbprint
          type: string
          description: The thumbprint of the Certificate to be deleted.
        - id: options
          type: <xref uid="@azure/batch.CertificateDeleteMethodOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'deleteMethod(string, string, Models.CertificateDeleteMethodOptionalParams)'
    uid: '@azure/batch.CertificateOperations.deleteMethod'
    package: '@azure/batch'
    summary: >-
      You cannot delete a Certificate if a resource (Pool or Compute Node) is
      using it. Before you can

      delete a Certificate, you must therefore make sure that the Certificate is
      not associated with

      any existing Pools, the Certificate is not installed on any Nodes (even if
      you remove a

      Certificate from a Pool, it is not removed from existing Compute Nodes in
      that Pool until they

      restart), and no running Tasks depend on the Certificate. If you try to
      delete a Certificate

      that is in use, the deletion fails. The Certificate status changes to
      deleteFailed. You can use

      Cancel Delete Certificate to set the status back to active if you decide
      that you want to

      continue using the Certificate.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(thumbprintAlgorithm: string, thumbprint: string,
        options?: Models.CertificateDeleteMethodOptionalParams)
      parameters:
        - id: thumbprintAlgorithm
          type: string
          description: |-
            The algorithm used to derive the thumbprint parameter. This must be
            sha1.
        - id: thumbprint
          type: string
          description: The thumbprint of the Certificate to be deleted.
        - id: options
          type: <xref uid="Models.CertificateDeleteMethodOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.CertificateDeleteResponse" />&gt;
        description: Promise<Models.CertificateDeleteResponse>
  - name: 'deleteMethod(string, string, ServiceCallback<void>)'
    uid: '@azure/batch.CertificateOperations.deleteMethod_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(thumbprintAlgorithm: string, thumbprint: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: thumbprintAlgorithm
          type: string
          description: |-
            The algorithm used to derive the thumbprint parameter. This must be
            sha1.
        - id: thumbprint
          type: string
          description: The thumbprint of the Certificate to be deleted.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      get(string, string, CertificateGetOptionalParams,
      ServiceCallback<Certificate>)
    uid: '@azure/batch.CertificateOperations.get_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(thumbprintAlgorithm: string, thumbprint: string, options:
        CertificateGetOptionalParams, callback: ServiceCallback<Certificate>)
      parameters:
        - id: thumbprintAlgorithm
          type: string
          description: |-
            The algorithm used to derive the thumbprint parameter. This must be
            sha1.
        - id: thumbprint
          type: string
          description: The thumbprint of the Certificate to get.
        - id: options
          type: <xref uid="@azure/batch.CertificateGetOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;<xref uid="@azure/batch.Certificate" />&gt;
          description: |
            The callback
  - name: 'get(string, string, Models.CertificateGetOptionalParams)'
    uid: '@azure/batch.CertificateOperations.get'
    package: '@azure/batch'
    summary: Gets information about the specified Certificate.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(thumbprintAlgorithm: string, thumbprint: string, options?:
        Models.CertificateGetOptionalParams)
      parameters:
        - id: thumbprintAlgorithm
          type: string
          description: |-
            The algorithm used to derive the thumbprint parameter. This must be
            sha1.
        - id: thumbprint
          type: string
          description: The thumbprint of the Certificate to get.
        - id: options
          type: <xref uid="Models.CertificateGetOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.CertificateGetResponse" />&gt;
        description: Promise<Models.CertificateGetResponse>
  - name: 'get(string, string, ServiceCallback<Certificate>)'
    uid: '@azure/batch.CertificateOperations.get_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(thumbprintAlgorithm: string, thumbprint: string, callback:
        ServiceCallback<Certificate>)
      parameters:
        - id: thumbprintAlgorithm
          type: string
          description: |-
            The algorithm used to derive the thumbprint parameter. This must be
            sha1.
        - id: thumbprint
          type: string
          description: The thumbprint of the Certificate to get.
        - id: callback
          type: ServiceCallback&lt;<xref uid="@azure/batch.Certificate" />&gt;
          description: |
            The callback
  - name: >-
      list(CertificateListOptionalParams,
      ServiceCallback<CertificateListResult>)
    uid: '@azure/batch.CertificateOperations.list_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function list(options: CertificateListOptionalParams, callback:
        ServiceCallback<CertificateListResult>)
      parameters:
        - id: options
          type: <xref uid="@azure/batch.CertificateListOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/batch.CertificateListResult"
            />&gt;
          description: |
            The callback
  - name: list(Models.CertificateListOptionalParams)
    uid: '@azure/batch.CertificateOperations.list'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function list(options?: Models.CertificateListOptionalParams)'
      parameters:
        - id: options
          type: <xref uid="Models.CertificateListOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.CertificateListResponse" />&gt;
        description: Promise<Models.CertificateListResponse>
  - name: list(ServiceCallback<CertificateListResult>)
    uid: '@azure/batch.CertificateOperations.list_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function list(callback: ServiceCallback<CertificateListResult>)'
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/batch.CertificateListResult"
            />&gt;
          description: |
            The callback
  - name: >-
      listNext(string, CertificateListNextOptionalParams,
      ServiceCallback<CertificateListResult>)
    uid: '@azure/batch.CertificateOperations.listNext_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, options:
        CertificateListNextOptionalParams, callback:
        ServiceCallback<CertificateListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: <xref uid="@azure/batch.CertificateListNextOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/batch.CertificateListResult"
            />&gt;
          description: |
            The callback
  - name: 'listNext(string, Models.CertificateListNextOptionalParams)'
    uid: '@azure/batch.CertificateOperations.listNext'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, options?:
        Models.CertificateListNextOptionalParams)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: <xref uid="Models.CertificateListNextOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.CertificateListResponse" />&gt;
        description: Promise<Models.CertificateListResponse>
  - name: 'listNext(string, ServiceCallback<CertificateListResult>)'
    uid: '@azure/batch.CertificateOperations.listNext_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, callback:
        ServiceCallback<CertificateListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/batch.CertificateListResult"
            />&gt;
          description: |
            The callback
